[{"title":"Idea常用快捷键","url":"http://yoursite.com/2019/12/15/Idea常用快捷键/","content":"","categories":[],"tags":[]},{"title":"Spring系列——BeanDefinition","url":"http://yoursite.com/2019/11/19/Spring系列——BeanDefinition/","content":"<p>[TOC]</p>\n<p>解析 <code>&lt;bean&gt;</code> 的过程就是构造 BeanDefinition 对象的过程，<code>&lt;bean&gt;</code> 元素标签拥有的配置属性，BeanDefinition 均提供了相应的属性，与之一一对应。</p>\n<h3 id=\"BeanDefinition-体系\"><a href=\"#BeanDefinition-体系\" class=\"headerlink\" title=\"BeanDefinition 体系\"></a>BeanDefinition 体系</h3><img src=\"/2019/11/19/Spring系列——BeanDefinition/SpringBeanDefinition类图.png\">\n<p><code>org.springframework.beans.factory.config.BeanDefinition</code> ，是一个接口，它描述了一个 Bean 实例的定义，包括属性值、构造方法值和继承自它的类的更多信息。代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String SCOPE_SINGLETON = ConfigurableBeanFactory.SCOPE_SINGLETON;</span><br><span class=\"line\">String SCOPE_PROTOTYPE = ConfigurableBeanFactory.SCOPE_PROTOTYPE;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> ROLE_APPLICATION = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> ROLE_SUPPORT = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> ROLE_INFRASTRUCTURE = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setParentName</span><span class=\"params\">(@Nullable String parentName)</span></span>;</span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">getParentName</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setBeanClassName</span><span class=\"params\">(@Nullable String beanClassName)</span></span>;</span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">getBeanClassName</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setScope</span><span class=\"params\">(@Nullable String scope)</span></span>;</span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">getScope</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setLazyInit</span><span class=\"params\">(<span class=\"keyword\">boolean</span> lazyInit)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isLazyInit</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setDependsOn</span><span class=\"params\">(@Nullable String... dependsOn)</span></span>;</span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\">String[] getDependsOn();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setAutowireCandidate</span><span class=\"params\">(<span class=\"keyword\">boolean</span> autowireCandidate)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isAutowireCandidate</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setPrimary</span><span class=\"params\">(<span class=\"keyword\">boolean</span> primary)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isPrimary</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setFactoryBeanName</span><span class=\"params\">(@Nullable String factoryBeanName)</span></span>;</span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">getFactoryBeanName</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setFactoryMethodName</span><span class=\"params\">(@Nullable String factoryMethodName)</span></span>;</span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">getFactoryMethodName</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ConstructorArgumentValues <span class=\"title\">getConstructorArgumentValues</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasConstructorArgumentValues</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> !getConstructorArgumentValues().isEmpty();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">MutablePropertyValues <span class=\"title\">getPropertyValues</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasPropertyValues</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> !getPropertyValues().isEmpty();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setInitMethodName</span><span class=\"params\">(@Nullable String initMethodName)</span></span>;</span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">getInitMethodName</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setDestroyMethodName</span><span class=\"params\">(@Nullable String destroyMethodName)</span></span>;</span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">getDestroyMethodName</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setRole</span><span class=\"params\">(<span class=\"keyword\">int</span> role)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getRole</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setDescription</span><span class=\"params\">(@Nullable String description)</span></span>;</span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">getDescription</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isSingleton</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isPrototype</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isAbstract</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">getResourceDescription</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"function\">BeanDefinition <span class=\"title\">getOriginatingBeanDefinition</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n<p>我们再来简单了解一下 BeanDefinition 体系中其他接口和类：</p>\n<ul>\n<li><code>org.springframework.cor.AttributeAccessor</code> 接口，定义了与其它对象的（元数据）进行连接和访问的约定，即对属性的修改，包括获取、设置、删除。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AttributeAccessor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setAttribute</span><span class=\"params\">(String name, @Nullable Object value)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"function\">Object <span class=\"title\">getAttribute</span><span class=\"params\">(String name)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"function\">Object <span class=\"title\">removeAttribute</span><span class=\"params\">(String name)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">hasAttribute</span><span class=\"params\">(String name)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tString[] attributeNames();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>org.springframework.beans.BeanMetadataElement</code> 接口，Bean 元对象持有的配置元素可以通过 <code>getSource()</code> 方法来获取。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BeanMetadataElement</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"function\">Object <span class=\"title\">getSource</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>ChildBeanDefinition、RootBeanDefinition、GenericBeanDefinition 三者都继承 AbstractBeanDefinition 抽象类，即 AbstractBeanDefinition 是对三个子类的共同的类信息进行抽象。如果配置文件中定义了父 <code>&lt;bean&gt;</code> 和 子 <code>&lt;bean&gt;</code> ，则父 <code>&lt;bean&gt;</code> 用 RootBeanDefinition 表示，子 <code>&lt;bean&gt;</code> 用 ChildBeanDefinition 表示，而没有父 <code>&lt;bean&gt;</code> 的就使用 RootBeanDefinition 表示。 GenericBeanDefinition 为一站式服务类。</li>\n</ul>\n<h3 id=\"BeanDefinitionReader-体系\"><a href=\"#BeanDefinitionReader-体系\" class=\"headerlink\" title=\"BeanDefinitionReader 体系\"></a>BeanDefinitionReader 体系</h3><img src=\"/2019/11/19/Spring系列——BeanDefinition/SpringBeanDefinitionReader类图.png\">\n<h4 id=\"BeanDefinitionReader-接口\"><a href=\"#BeanDefinitionReader-接口\" class=\"headerlink\" title=\"BeanDefinitionReader 接口\"></a>BeanDefinitionReader 接口</h4><p><code>org.springframework.beans.factory.support.BeanDefinitionReader</code>是一个接口，其作用是将资源文件（spring的配置文件）中的信息转换成 BeanDefinition 形式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BeanDefinitionReader</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取 BeanDefinitionRegistry 对象，该类的主要作用将 BeanDefinition 注册到BeanDefinition的注册表中</span></span><br><span class=\"line\">\t<span class=\"function\">BeanDefinitionRegistry <span class=\"title\">getRegistry</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取 ResourceLoader，主要就是根据路径和ClassLoader获取Resource，之后通过Resource获取输入流读取文件</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"function\">ResourceLoader <span class=\"title\">getResourceLoader</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Bean的类加载器</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"function\">ClassLoader <span class=\"title\">getBeanClassLoader</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Bean的名字生成器</span></span><br><span class=\"line\">\t<span class=\"function\">BeanNameGenerator <span class=\"title\">getBeanNameGenerator</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//加载 BeanDefiniton，从配置文件中通过ResouceLoader和Resource加载资源</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">loadBeanDefinitions</span><span class=\"params\">(Resource resource)</span> <span class=\"keyword\">throws</span> BeanDefinitionStoreException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">loadBeanDefinitions</span><span class=\"params\">(Resource... resources)</span> <span class=\"keyword\">throws</span> BeanDefinitionStoreException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">loadBeanDefinitions</span><span class=\"params\">(String location)</span> <span class=\"keyword\">throws</span> BeanDefinitionStoreException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">loadBeanDefinitions</span><span class=\"params\">(String... locations)</span> <span class=\"keyword\">throws</span> BeanDefinitionStoreException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"AbstractBeanDefinitionReader-抽象类\"><a href=\"#AbstractBeanDefinitionReader-抽象类\" class=\"headerlink\" title=\"AbstractBeanDefinitionReader 抽象类\"></a>AbstractBeanDefinitionReader 抽象类</h4><ul>\n<li>BeanDefinitionReader 接口有一个抽象类，为 <code>AbstractBeanDefinitionReader</code> 。</li>\n<li>AbstractBeanDefinitionReader 有三种实现类，分别是 <strong>GroovyBeanDefinitionReader</strong>(groovy 文件的读取器)、<strong>PropertiesBeanDefinitionReader</strong>(Properties 文件的读取器)和 <strong>XmlBeanDefinitionReader</strong>(Xml 文件的读取器)。</li>\n<li>AbstractBeanDefinitionReader 抽象类内部有个 <code>BeanDefinitionRegistry</code> 接口类型的属性，BeanDefinitionRegistry 接口持有 BeanDefinition 信息的注册中心，可以注册新的 BeanDefinition，删除旧的 BeanDefinition，获取注册中心的 BeanDefinition 。该接口是 Spring 提供的唯一一个可以操作 BeanDefinition 数据的接口。上述三种实现类内部最终对 bean 的注册都是通过 BeanDefinitionRegistry 完成的，不同点在于它们处理过程不一样，比如对 xml 文件的解析和 properties 文件的解析过程就不同。</li>\n<li><code>loadBeanDefinitions()</code>是该抽象类中最重要的方法。</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ol>\n<li><a href=\"https://fangjian0423.github.io/2017/06/15/spring-bean-register-note/\" target=\"_blank\" rel=\"noopener\">Spring类注册笔记</a></li>\n</ol>\n","categories":[],"tags":[]},{"title":"Spring系列——IoC之解析Bean","url":"http://yoursite.com/2019/10/28/Spring系列——IoC之解析Bean/","content":"<p>[TOC]</p>\n<p>前面的文章我们讲解了 Bean 的装载和注册，接下来继续讲解 Bean 的解析。上篇文章提到 Bean 的解析有两个方法：</p>\n<ol>\n<li><p>如果根节点或者子节点采用默认命名空间的话，则调用 <code>parseDefaultElement(...)</code> 方法，进行默认标签解析。</p>\n</li>\n<li><p>否则，调用 <code>BeanDefinitionParserDelegate.parseCustomElement(...)</code> 方法，进行自定义解析。</p>\n</li>\n</ol>\n<h3 id=\"parseDefaultElement\"><a href=\"#parseDefaultElement\" class=\"headerlink\" title=\"parseDefaultElement()\"></a>parseDefaultElement()</h3><p>从下列源码可以看出，<code>parseDefaultElement()</code> 分别是对四种不同的标签进行解析，分别是 import、alias、bean、beans 。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DefaultBeanDefinitionDocumentReader.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">parseDefaultElement</span><span class=\"params\">(Element ele, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// import</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (delegate.nodeNameEquals(ele, IMPORT_ELEMENT)) &#123;</span><br><span class=\"line\">\t\timportBeanDefinitionResource(ele);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// alias</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (delegate.nodeNameEquals(ele, ALIAS_ELEMENT)) &#123;</span><br><span class=\"line\">\t\tprocessAliasRegistration(ele);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// bean</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (delegate.nodeNameEquals(ele, BEAN_ELEMENT)) &#123;</span><br><span class=\"line\">\t\tprocessBeanDefinition(ele, delegate);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// beans</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (delegate.nodeNameEquals(ele, NESTED_BEANS_ELEMENT)) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// recurse</span></span><br><span class=\"line\">\t\tdoRegisterBeanDefinitions(ele);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解析-import\"><a href=\"#解析-import\" class=\"headerlink\" title=\"解析 import\"></a>解析 import</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DefaultBeanDefinitionDocumentReader.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">importBeanDefinitionResource</span><span class=\"params\">(Element ele)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// &lt;1&gt; 获取 resource 属性值</span></span><br><span class=\"line\">\tString location = ele.getAttribute(RESOURCE_ATTRIBUTE);</span><br><span class=\"line\">\t<span class=\"comment\">// 为空，则直接退出</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!StringUtils.hasText(location)) &#123;</span><br><span class=\"line\">\t\tgetReaderContext().error(<span class=\"string\">\"Resource location must not be empty\"</span>, ele);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// &lt;2&gt; 解析系统属性，格式如 ：\"$&#123;user.dir&#125;\"</span></span><br><span class=\"line\">\tlocation = getReaderContext().getEnvironment().resolveRequiredPlaceholders(location);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 实际 Resource 集合，即 import 的地址，有哪些 Resource 资源</span></span><br><span class=\"line\">\tSet&lt;Resource&gt; actualResources = <span class=\"keyword\">new</span> LinkedHashSet&lt;&gt;(<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// &lt;3&gt; 判断 location 是相对路径还是绝对路径</span></span><br><span class=\"line\">\t<span class=\"keyword\">boolean</span> absoluteLocation = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tabsoluteLocation = ResourcePatternUtils.isUrl(location) || ResourceUtils.toURI(location).isAbsolute();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (URISyntaxException ex) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// cannot convert to an URI, considering the location relative</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// unless it is the well-known Spring prefix \"classpath*:\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// &lt;4&gt; 绝对路径</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (absoluteLocation) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 添加配置文件地址的 Resource 到 actualResources 中，并加载相应的 BeanDefinition </span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> importCount = getReaderContext().getReader().loadBeanDefinitions(location, actualResources);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\tlogger.trace(<span class=\"string\">\"Imported \"</span> + importCount + <span class=\"string\">\" bean definitions from URL location [\"</span> + location + <span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class=\"line\">\t\t\tgetReaderContext().error(</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">\"Failed to import bean definitions from URL location [\"</span> + location + <span class=\"string\">\"]\"</span>, ele, ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// &lt;5&gt; 相对路径</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// No URL -&gt; considering resource location as relative to the current file.</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> importCount;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 创建相对地址的 Resource</span></span><br><span class=\"line\">\t\t\tResource relativeResource = getReaderContext().getResource().createRelative(location);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 存在</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (relativeResource.exists()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 加载 relativeResource 中的 BeanDefinition </span></span><br><span class=\"line\">\t\t\t\timportCount = getReaderContext().getReader().loadBeanDefinitions(relativeResource);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 添加到 actualResources 中</span></span><br><span class=\"line\">\t\t\t\tactualResources.add(relativeResource);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 不存在</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 获得根路径地址</span></span><br><span class=\"line\">\t\t\t\tString baseLocation = getReaderContext().getResource().getURL().toString();</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 添加配置文件地址的 Resource 到 actualResources 中，并加载相应的 BeanDefinition </span></span><br><span class=\"line\">\t\t\t\timportCount = getReaderContext().getReader().loadBeanDefinitions(</span><br><span class=\"line\">\t\t\t\t\t\tStringUtils.applyRelativePath(baseLocation, location), actualResources);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\tlogger.trace(<span class=\"string\">\"Imported \"</span> + importCount + <span class=\"string\">\" bean definitions from relative location [\"</span> + location + <span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (IOException ex) &#123;</span><br><span class=\"line\">\t\t\tgetReaderContext().error(<span class=\"string\">\"Failed to resolve current resource location\"</span>, ele, ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class=\"line\">\t\t\tgetReaderContext().error(</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">\"Failed to import bean definitions from relative location [\"</span> + location + <span class=\"string\">\"]\"</span>, ele, ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// &lt;6&gt; 解析成功后，进行监听器激活处理</span></span><br><span class=\"line\">\tResource[] actResArray = actualResources.toArray(<span class=\"keyword\">new</span> Resource[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\tgetReaderContext().fireImportProcessed(location, actResArray, extractSource(ele));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>解析 <code>import</code> 标签的过程较为清晰，整个过程如下：</p>\n<ul>\n<li><1> ，获取 source 属性的值，该值表示资源的路径。</1></li>\n<li><2> ，解析路径中的系统属性，如 <code>&quot;${user.dir}&quot;</code> 。</2></li>\n<li><3> ，判断资源路径 location 是绝对路径还是相对路径。<ul>\n<li>以 <code>classpath*:</code> 或者 <code>classpath:</code> 开头的为绝对路径。</li>\n<li>能够通过该 location 构建出 <code>java.net.URL</code> 为绝对路径。</li>\n<li>根据 location 构造 <code>java.net.URI</code> 判断调用 <code>isAbsolute()</code> 方法，判断是否为绝对路径。</li>\n</ul>\n</3></li>\n<li><4> ，如果是绝对路径，则递归调用 Bean 的解析过程，进行另一次的解析。<ul>\n<li>首先，获取 ResourceLoader 对象。</li>\n<li>然后，根据不同的 ResourceLoader 执行不同的逻辑，主要是可能存在多个 Resource 。</li>\n<li>最终，都会回归到 <code>XmlBeanDefinitionReader.loadBeanDefinitions(Resource... resources)</code> 方法，所以这是一个递归的过程。</li>\n<li>另外，获得到的 Resource 的对象或数组，都会添加到 actualResources 中。</li>\n</ul>\n</4></li>\n<li><5> ，如果是相对路径，则会根据相应的 Resource 计算出相应的相对路径的 Resource 对象 ，然后：<ul>\n<li>若该 Resource 存在，则调用 <code>XmlBeanDefinitionReader.loadBeanDefinitions()</code> 方法，进行 BeanDefinition 加载。</li>\n<li>否则，构造一个绝对 location( 即 <code>StringUtils.applyRelativePath(baseLocation, location)</code> 处的代码)，并调用 <code>loadBeanDefinitions(String location, Set&lt;Resource&gt; actualResources)</code> 方法，与绝对路径过程一样。</li>\n</ul>\n</5></li>\n<li><6> ，通知监听器，完成解析。</6></li>\n</ul>\n<h4 id=\"AbstractBeanDefinitionReader-loadBeanDefinitions\"><a href=\"#AbstractBeanDefinitionReader-loadBeanDefinitions\" class=\"headerlink\" title=\"AbstractBeanDefinitionReader.loadBeanDefinitions()\"></a>AbstractBeanDefinitionReader.loadBeanDefinitions()</h4><p>我们再看一下上面过程中比较重要的 <code>loadBeanDefinitions()</code> 方法，该方法位于 <code>AbstractBeanDefinitionReader</code> 类中，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//AbstractBeanDefinitionReader.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">loadBeanDefinitions</span><span class=\"params\">(String location, @Nullable Set&lt;Resource&gt; actualResources)</span> <span class=\"keyword\">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获得 ResourceLoader 对象</span></span><br><span class=\"line\">\tResourceLoader resourceLoader = getResourceLoader();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (resourceLoader == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanDefinitionStoreException(</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">\"Cannot load bean definitions from location [\"</span> + location + <span class=\"string\">\"]: no ResourceLoader available\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (resourceLoader <span class=\"keyword\">instanceof</span> ResourcePatternResolver) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Resource pattern matching available.</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 获得 Resource 数组，因为 Pattern 模式匹配下，可能有多个 Resource 。例如说，Ant 风格的 location</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tResource[] resources = ((ResourcePatternResolver) resourceLoader).getResources(location);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 加载 BeanDefinition</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> count = loadBeanDefinitions(resources);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 添加到 actualResources 中</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (actualResources != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tCollections.addAll(actualResources, resources);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\tlogger.trace(<span class=\"string\">\"Loaded \"</span> + count + <span class=\"string\">\" bean definitions from location pattern [\"</span> + location + <span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (IOException ex) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanDefinitionStoreException(</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">\"Could not resolve bean definition resource pattern [\"</span> + location + <span class=\"string\">\"]\"</span>, ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获得 Resource 对象，</span></span><br><span class=\"line\">\t\tResource resource = resourceLoader.getResource(location);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 加载 BeanDefinition </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> count = loadBeanDefinitions(resource);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 添加到 actualResources 中</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (actualResources != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tactualResources.add(resource);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.trace(<span class=\"string\">\"Loaded \"</span> + count + <span class=\"string\">\" bean definitions from location [\"</span> + location + <span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解析-bean\"><a href=\"#解析-bean\" class=\"headerlink\" title=\"解析 bean\"></a>解析 bean</h3><h4 id=\"DefaultBeanDefinitionDocumentReader-processBeanDefinition\"><a href=\"#DefaultBeanDefinitionDocumentReader-processBeanDefinition\" class=\"headerlink\" title=\"DefaultBeanDefinitionDocumentReader.processBeanDefinition()\"></a>DefaultBeanDefinitionDocumentReader.processBeanDefinition()</h4><p>在方法 <code>parseDefaultElement(...)</code> 方法中，如果遇到标签 <code>&lt;bean&gt;</code> 时，则调用 <code>processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate)</code> 方法，进行 bean 标签的解析。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DefaultBeanDefinitionDocumentReader.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">processBeanDefinition</span><span class=\"params\">(Element ele, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 进行 bean 元素解析</span></span><br><span class=\"line\">\t<span class=\"comment\">// &lt;1&gt; 如果解析成功，则返回 BeanDefinitionHolder 对象。而 BeanDefinitionHolder 为 name 和 alias 的 BeanDefinition 对象</span></span><br><span class=\"line\">\t<span class=\"comment\">// 如果解析失败，则返回 null</span></span><br><span class=\"line\">\tBeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (bdHolder != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// &lt;2&gt; 进行自定义标签处理</span></span><br><span class=\"line\">\t\tbdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder);</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// &lt;3&gt; 进行 BeanDefinition 的注册</span></span><br><span class=\"line\">\t\t\tBeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class=\"line\">\t\t\tgetReaderContext().error(<span class=\"string\">\"Failed to register bean definition with name '\"</span> +</span><br><span class=\"line\">\t\t\t\t\tbdHolder.getBeanName() + <span class=\"string\">\"'\"</span>, ele, ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// &lt;4&gt; 发出响应事件，通知相关的监听器，已完成该 Bean 标签的解析。</span></span><br><span class=\"line\">\t\tgetReaderContext().fireComponentRegistered(<span class=\"keyword\">new</span> BeanComponentDefinition(bdHolder));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"BeanDefinitionParserDelegate-parseBeanDefinitionElement-Element-ele-Nullable-BeanDefinition-containingBean\"><a href=\"#BeanDefinitionParserDelegate-parseBeanDefinitionElement-Element-ele-Nullable-BeanDefinition-containingBean\" class=\"headerlink\" title=\"BeanDefinitionParserDelegate.parseBeanDefinitionElement(Element ele, @ Nullable BeanDefinition containingBean)\"></a>BeanDefinitionParserDelegate.parseBeanDefinitionElement(Element ele, @ Nullable BeanDefinition containingBean)</h4><p>接下来重点关注一下 <code>BeanDefinitionParserDelegate.parseBeanDefinitionElement(Element ele, BeanDefinitionParserDelegate delegate)</code> 方法，其作用是进行 <code>&lt;bean&gt;</code> 元素解析。代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// BeanDefinitionParserDelegate.java</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> BeanDefinitionHolder <span class=\"title\">parseBeanDefinitionElement</span><span class=\"params\">(Element ele)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> parseBeanDefinitionElement(ele, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> BeanDefinitionHolder <span class=\"title\">parseBeanDefinitionElement</span><span class=\"params\">(Element ele, @Nullable BeanDefinition containingBean)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// &lt;1&gt; 解析 id 和 name 属性</span></span><br><span class=\"line\">\tString id = ele.getAttribute(ID_ATTRIBUTE);</span><br><span class=\"line\">\tString nameAttr = ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// &lt;1&gt; 计算别名集合</span></span><br><span class=\"line\">\tList&lt;String&gt; aliases = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (StringUtils.hasLength(nameAttr)) &#123;</span><br><span class=\"line\">\t\tString[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS);</span><br><span class=\"line\">\t\taliases.addAll(Arrays.asList(nameArr));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// &lt;3.1&gt; beanName ，优先，使用 id</span></span><br><span class=\"line\">\tString beanName = id;</span><br><span class=\"line\">\t<span class=\"comment\">// &lt;3.2&gt; beanName ，其次，使用 aliases 的第一个</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!StringUtils.hasText(beanName) &amp;&amp; !aliases.isEmpty()) &#123;</span><br><span class=\"line\">\t\tbeanName = aliases.remove(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.trace(<span class=\"string\">\"No XML 'id' specified - using '\"</span> + beanName +</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">\"' as bean name and \"</span> + aliases + <span class=\"string\">\" as aliases\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// &lt;2&gt; 检查 beanName 的唯一性</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (containingBean == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\tcheckNameUniqueness(beanName, aliases, ele);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// &lt;4&gt; 解析属性，并构造 AbstractBeanDefinition 对象</span></span><br><span class=\"line\">\tAbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (beanDefinition != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// &lt;3.3&gt; beanName ，再次，使用 beanName 生成规则</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!StringUtils.hasText(beanName)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (containingBean != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// &lt;3.3&gt; 生成唯一的 beanName</span></span><br><span class=\"line\">\t\t\t\t\tbeanName = BeanDefinitionReaderUtils.generateBeanName(</span><br><span class=\"line\">\t\t\t\t\t\t\tbeanDefinition, <span class=\"keyword\">this</span>.readerContext.getRegistry(), <span class=\"keyword\">true</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// &lt;3.3&gt; 生成唯一的 beanName</span></span><br><span class=\"line\">\t\t\t\t\tbeanName = <span class=\"keyword\">this</span>.readerContext.generateBeanName(beanDefinition);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// Register an alias for the plain bean class name, if still possible,</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// if the generator returned the class name plus a suffix.</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// This is expected for Spring 1.2/2.0 backwards compatibility.</span></span><br><span class=\"line\">\t\t\t\t\tString beanClassName = beanDefinition.getBeanClassName();</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (beanClassName != <span class=\"keyword\">null</span> &amp;&amp;</span><br><span class=\"line\">\t\t\t\t\t\t\tbeanName.startsWith(beanClassName) &amp;&amp; beanName.length() &gt; beanClassName.length() &amp;&amp;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t!<span class=\"keyword\">this</span>.readerContext.getRegistry().isBeanNameInUse(beanClassName)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\taliases.add(beanClassName);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\t\tlogger.trace(<span class=\"string\">\"Neither XML 'id' nor 'name' specified - \"</span> +</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"string\">\"using generated bean name [\"</span> + beanName + <span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">\t\t\t\terror(ex.getMessage(), ele);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// &lt;5&gt; 根据所获取的信息（beanName、aliases、beanDefinition）创建 BeanDefinitionHolder 对象</span></span><br><span class=\"line\">\t\tString[] aliasesArray = StringUtils.toStringArray(aliases);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BeanDefinitionHolder(beanDefinition, beanName, aliasesArray);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"BeanDefinitionParserDelegate-parseBeanDefinitionElement-Element-ele-String-beanName-Nullable-BeanDefinition-containingBean\"><a href=\"#BeanDefinitionParserDelegate-parseBeanDefinitionElement-Element-ele-String-beanName-Nullable-BeanDefinition-containingBean\" class=\"headerlink\" title=\"BeanDefinitionParserDelegate.parseBeanDefinitionElement(Element ele, String beanName, @ Nullable BeanDefinition containingBean)\"></a>BeanDefinitionParserDelegate.parseBeanDefinitionElement(Element ele, String beanName, @ Nullable BeanDefinition containingBean)</h4><p>在 <4> ，调用 <code>parseBeanDefinitionElement(Element ele, String beanName, BeanDefinition containingBean)</code> 方法，对属性进行解析并封装成 AbstractBeanDefinition 实例 beanDefinition 。</4></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> AbstractBeanDefinition <span class=\"title\">parseBeanDefinitionElement</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\tElement ele, String beanName, @Nullable BeanDefinition containingBean)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.parseState.push(<span class=\"keyword\">new</span> BeanEntry(beanName));</span><br><span class=\"line\">\t<span class=\"comment\">// 解析 class 属性</span></span><br><span class=\"line\">\tString className = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ele.hasAttribute(CLASS_ATTRIBUTE)) &#123;</span><br><span class=\"line\">\t\tclassName = ele.getAttribute(CLASS_ATTRIBUTE).trim();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 解析 parent 属性</span></span><br><span class=\"line\">\tString parent = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ele.hasAttribute(PARENT_ATTRIBUTE)) &#123;</span><br><span class=\"line\">\t\tparent = ele.getAttribute(PARENT_ATTRIBUTE);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建用于承载属性的 AbstractBeanDefinition 实例</span></span><br><span class=\"line\">\t\tAbstractBeanDefinition bd = createBeanDefinition(className, parent);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 解析默认 bean 的各种属性</span></span><br><span class=\"line\">\t\tparseBeanDefinitionAttributes(ele, beanName, containingBean, bd);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 提取 description</span></span><br><span class=\"line\">\t\tbd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 下面的一堆是解析 &lt;bean&gt;......&lt;/bean&gt; 内部的子元素，</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 解析出来以后的信息都放到 bd 的属性中</span></span><br><span class=\"line\">\t\tparseMetaElements(ele, bd);</span><br><span class=\"line\">\t\tparseLookupOverrideSubElements(ele, bd.getMethodOverrides());</span><br><span class=\"line\">\t\tparseReplacedMethodSubElements(ele, bd.getMethodOverrides());</span><br><span class=\"line\">\t\tparseConstructorArgElements(ele, bd);</span><br><span class=\"line\">\t\tparsePropertyElements(ele, bd);</span><br><span class=\"line\">\t\tparseQualifierElements(ele, bd);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tbd.setResource(<span class=\"keyword\">this</span>.readerContext.getResource());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tbd.setSource(extractSource(ele));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> bd;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class=\"line\">\t\terror(<span class=\"string\">\"Bean class [\"</span> + className + <span class=\"string\">\"] not found\"</span>, ele, ex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (NoClassDefFoundError err) &#123;</span><br><span class=\"line\">\t\terror(<span class=\"string\">\"Class that bean class [\"</span> + className + <span class=\"string\">\"] depends on not found\"</span>, ele, err);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">\t\terror(<span class=\"string\">\"Unexpected failure during bean definition parsing\"</span>, ele, ex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.parseState.pop();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"BeanDefinitionParserDelegate-parseBeanDefinitionAttributes\"><a href=\"#BeanDefinitionParserDelegate-parseBeanDefinitionAttributes\" class=\"headerlink\" title=\"BeanDefinitionParserDelegate.parseBeanDefinitionAttributes()\"></a>BeanDefinitionParserDelegate.parseBeanDefinitionAttributes()</h4><p>BeanDefinitionParserDelegate.parseBeanDefinitionAttributes(…)用于解析 bean 中的各类基本属性。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// BeanDefinitionParserDelegate.java</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> AbstractBeanDefinition <span class=\"title\">parseBeanDefinitionAttributes</span><span class=\"params\">(Element ele, String beanName,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        @Nullable BeanDefinition containingBean, AbstractBeanDefinition bd)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 解析 scope 属性</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ele.hasAttribute(SINGLETON_ATTRIBUTE)) &#123;</span><br><span class=\"line\">        error(<span class=\"string\">\"Old 1.x 'singleton' attribute in use - upgrade to 'scope' declaration\"</span>, ele);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ele.hasAttribute(SCOPE_ATTRIBUTE)) &#123;</span><br><span class=\"line\">        bd.setScope(ele.getAttribute(SCOPE_ATTRIBUTE));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (containingBean != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Take default from containing bean in case of an inner bean definition.</span></span><br><span class=\"line\">        bd.setScope(containingBean.getScope());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 解析 abstract 属性</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ele.hasAttribute(ABSTRACT_ATTRIBUTE)) &#123;</span><br><span class=\"line\">        bd.setAbstract(TRUE_VALUE.equals(ele.getAttribute(ABSTRACT_ATTRIBUTE)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 解析 lazy-init 属性</span></span><br><span class=\"line\">    String lazyInit = ele.getAttribute(LAZY_INIT_ATTRIBUTE);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (DEFAULT_VALUE.equals(lazyInit)) &#123;</span><br><span class=\"line\">        lazyInit = <span class=\"keyword\">this</span>.defaults.getLazyInit();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bd.setLazyInit(TRUE_VALUE.equals(lazyInit));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 解析 autowire 属性</span></span><br><span class=\"line\">    String autowire = ele.getAttribute(AUTOWIRE_ATTRIBUTE);</span><br><span class=\"line\">    bd.setAutowireMode(getAutowireMode(autowire));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 解析 depends-on 属性</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ele.hasAttribute(DEPENDS_ON_ATTRIBUTE)) &#123;</span><br><span class=\"line\">        String dependsOn = ele.getAttribute(DEPENDS_ON_ATTRIBUTE);</span><br><span class=\"line\">        bd.setDependsOn(StringUtils.tokenizeToStringArray(dependsOn, MULTI_VALUE_ATTRIBUTE_DELIMITERS));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 解析 autowire-candidate 属性</span></span><br><span class=\"line\">    String autowireCandidate = ele.getAttribute(AUTOWIRE_CANDIDATE_ATTRIBUTE);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">\"\"</span>.equals(autowireCandidate) || DEFAULT_VALUE.equals(autowireCandidate)) &#123;</span><br><span class=\"line\">        String candidatePattern = <span class=\"keyword\">this</span>.defaults.getAutowireCandidates();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (candidatePattern != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            String[] patterns = StringUtils.commaDelimitedListToStringArray(candidatePattern);</span><br><span class=\"line\">            bd.setAutowireCandidate(PatternMatchUtils.simpleMatch(patterns, beanName));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        bd.setAutowireCandidate(TRUE_VALUE.equals(autowireCandidate));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 解析 primary 标签</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ele.hasAttribute(PRIMARY_ATTRIBUTE)) &#123;</span><br><span class=\"line\">        bd.setPrimary(TRUE_VALUE.equals(ele.getAttribute(PRIMARY_ATTRIBUTE)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 解析 init-method 属性</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ele.hasAttribute(INIT_METHOD_ATTRIBUTE)) &#123;</span><br><span class=\"line\">        String initMethodName = ele.getAttribute(INIT_METHOD_ATTRIBUTE);</span><br><span class=\"line\">        bd.setInitMethodName(initMethodName);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.defaults.getInitMethod() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        bd.setInitMethodName(<span class=\"keyword\">this</span>.defaults.getInitMethod());</span><br><span class=\"line\">        bd.setEnforceInitMethod(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 解析 destroy-method 属性</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ele.hasAttribute(DESTROY_METHOD_ATTRIBUTE)) &#123;</span><br><span class=\"line\">        String destroyMethodName = ele.getAttribute(DESTROY_METHOD_ATTRIBUTE);</span><br><span class=\"line\">        bd.setDestroyMethodName(destroyMethodName);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.defaults.getDestroyMethod() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        bd.setDestroyMethodName(<span class=\"keyword\">this</span>.defaults.getDestroyMethod());</span><br><span class=\"line\">        bd.setEnforceDestroyMethod(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 解析 factory-method 属性</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ele.hasAttribute(FACTORY_METHOD_ATTRIBUTE)) &#123;</span><br><span class=\"line\">        bd.setFactoryMethodName(ele.getAttribute(FACTORY_METHOD_ATTRIBUTE));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ele.hasAttribute(FACTORY_BEAN_ATTRIBUTE)) &#123;</span><br><span class=\"line\">        bd.setFactoryBeanName(ele.getAttribute(FACTORY_BEAN_ATTRIBUTE));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> bd;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>完成 bean 标签的基本属性解析后，会依次调用 BeanDefinitionParserDelegate 的 <code>parseMetaElements(lement ele, BeanMetadataAttributeAccessor attributeAccessor)</code> 、 <code>parseLookupOverrideSubElements(Element beanEle, MethodOverrides overrides)</code> 、 <code>parseReplacedMethodSubElements(Element beanEle, MethodOverrides overrides)</code> 方法，分别对子元素 <code>meta</code>、<code>lookup-method</code>、<code>replace-method</code> 元素完成解析。</p>\n<h4 id=\"parseConstructorArgElements-Element-beanEle-BeanDefinition-bd\"><a href=\"#parseConstructorArgElements-Element-beanEle-BeanDefinition-bd\" class=\"headerlink\" title=\"parseConstructorArgElements(Element beanEle, BeanDefinition bd)\"></a>parseConstructorArgElements(Element beanEle, BeanDefinition bd)</h4><p>简单了解对子元素 <code>meta</code>、<code>lookup-method</code>、<code>replace-method</code> 元素的解析过程后，我们详细看一下 <code>parseConstructorArgElements(Element beanEle, BeanDefinition bd)</code> 方法，该方法可完成 <code>constructor-arg</code> 子元素的解析。代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// BeanDefinitionParserDelegate.java</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">parseConstructorArgElements</span><span class=\"params\">(Element beanEle, BeanDefinition bd)</span> </span>&#123;</span><br><span class=\"line\">\tNodeList nl = beanEle.getChildNodes();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class=\"line\">\t\tNode node = nl.item(i);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isCandidateElement(node) &amp;&amp; nodeNameEquals(node, CONSTRUCTOR_ARG_ELEMENT)) &#123; <span class=\"comment\">// 标签名为 constructor-arg</span></span><br><span class=\"line\">\t\t\tparseConstructorArgElement((Element) node, bd);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>遍历所有子元素，如果为 <code>constructor-arg</code> 标签，则调用 <code>parseConstructorArgElement(Element ele, BeanDefinition bd)</code> 方法，进行解析。代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// BeanDefinitionParserDelegate.java</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">parseConstructorArgElement</span><span class=\"params\">(Element ele, BeanDefinition bd)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 提取 index、type、name 属性值</span></span><br><span class=\"line\">    String indexAttr = ele.getAttribute(INDEX_ATTRIBUTE);</span><br><span class=\"line\">    String typeAttr = ele.getAttribute(TYPE_ATTRIBUTE);</span><br><span class=\"line\">    String nameAttr = ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (StringUtils.hasLength(indexAttr)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果有 index</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> index = Integer.parseInt(indexAttr);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                error(<span class=\"string\">\"'index' cannot be lower than 0\"</span>, ele);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// &lt;1&gt;</span></span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.parseState.push(<span class=\"keyword\">new</span> ConstructorArgumentEntry(index));</span><br><span class=\"line\">                    <span class=\"comment\">// &lt;2&gt; 解析 ele 对应属性元素</span></span><br><span class=\"line\">                    Object value = parsePropertyValue(ele, bd, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// &lt;3&gt; 根据解析的属性元素构造一个 ValueHolder 对象</span></span><br><span class=\"line\">                    ConstructorArgumentValues.ValueHolder valueHolder = <span class=\"keyword\">new</span> ConstructorArgumentValues.ValueHolder(value);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (StringUtils.hasLength(typeAttr)) &#123;</span><br><span class=\"line\">                        valueHolder.setType(typeAttr);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (StringUtils.hasLength(nameAttr)) &#123;</span><br><span class=\"line\">                        valueHolder.setName(nameAttr);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    valueHolder.setSource(extractSource(ele));</span><br><span class=\"line\">                    <span class=\"comment\">// 不允许重复指定相同参数</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (bd.getConstructorArgumentValues().hasIndexedArgumentValue(index)) &#123;</span><br><span class=\"line\">                        error(<span class=\"string\">\"Ambiguous constructor-arg entries for index \"</span> + index, ele);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// &lt;4&gt; 加入到 indexedArgumentValues 中</span></span><br><span class=\"line\">                        bd.getConstructorArgumentValues().addIndexedArgumentValue(index, valueHolder);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.parseState.pop();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NumberFormatException ex) &#123;</span><br><span class=\"line\">            error(<span class=\"string\">\"Attribute 'index' of tag 'constructor-arg' must be an integer\"</span>, ele);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.parseState.push(<span class=\"keyword\">new</span> ConstructorArgumentEntry());</span><br><span class=\"line\">            <span class=\"comment\">// 解析 ele 对应属性元素</span></span><br><span class=\"line\">            Object value = parsePropertyValue(ele, bd, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 根据解析的属性元素构造一个 ValueHolder 对象</span></span><br><span class=\"line\">            ConstructorArgumentValues.ValueHolder valueHolder = <span class=\"keyword\">new</span> ConstructorArgumentValues.ValueHolder(value);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (StringUtils.hasLength(typeAttr)) &#123;</span><br><span class=\"line\">                valueHolder.setType(typeAttr);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (StringUtils.hasLength(nameAttr)) &#123;</span><br><span class=\"line\">                valueHolder.setName(nameAttr);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            valueHolder.setSource(extractSource(ele));</span><br><span class=\"line\">            <span class=\"comment\">// 加入到 indexedArgumentValues 中</span></span><br><span class=\"line\">            bd.getConstructorArgumentValues().addGenericArgumentValue(valueHolder);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.parseState.pop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先获取 <code>index</code>、<code>type</code>、<code>name</code> 三个属性值，然后根据是否存在 <code>index</code> 来区分，执行后续逻辑。</p>\n<ul>\n<li><1> ，构造 ConstructorArgumentEntry 对象并将其加入到 ParseState 队列中。ConstructorArgumentEntry 表示构造函数的参数。</1></li>\n<li><2> ，调用 <code>parsePropertyValue(Element ele, BeanDefinition bd, String propertyName)</code> 方法，解析 constructor-arg 子元素，返回结果值。</2></li>\n<li><3> ，根据解析的结果值，构造 ConstructorArgumentValues.ValueHolder 实例对象，并将 type、name 设置到 ValueHolder 中</3></li>\n<li><4> ，最后，将 ValueHolder 实例对象添加到 indexedArgumentValues 集合中。</4></li>\n</ul>\n<p>无 <code>index</code> 的处理逻辑差不多，只有几点不同：</p>\n<ol>\n<li>构造 ConstructorArgumentEntry 对象时是调用无参构造函数。</li>\n<li>最后将 ValueHolder 实例添加到 genericArgumentValues 集合中。</li>\n</ol>\n<h4 id=\"parsePropertyValue\"><a href=\"#parsePropertyValue\" class=\"headerlink\" title=\"parsePropertyValue()\"></a>parsePropertyValue()</h4><p>调用 <code>parsePropertyValue(Element ele, BeanDefinition bd, String propertyName)</code> 方法，解析 <code>constructor-arg</code> 子元素，返回结果值。代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// BeanDefinitionParserDelegate.java</span></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">parsePropertyValue</span><span class=\"params\">(Element ele, BeanDefinition bd, @Nullable String propertyName)</span> </span>&#123;</span><br><span class=\"line\">    String elementName = (propertyName != <span class=\"keyword\">null</span> ?</span><br><span class=\"line\">            <span class=\"string\">\"&lt;property&gt; element for property '\"</span> + propertyName + <span class=\"string\">\"'\"</span> :</span><br><span class=\"line\">            <span class=\"string\">\"&lt;constructor-arg&gt; element\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &lt;1&gt; 查找子节点中，是否有 ref、value、list 等元素</span></span><br><span class=\"line\">    <span class=\"comment\">// Should only have one child element: ref, value, list, etc.</span></span><br><span class=\"line\">    NodeList nl = ele.getChildNodes();</span><br><span class=\"line\">    Element subElement = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class=\"line\">        Node node = nl.item(i);</span><br><span class=\"line\">        <span class=\"comment\">// meta 、description 不处理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node <span class=\"keyword\">instanceof</span> Element &amp;&amp; !nodeNameEquals(node, DESCRIPTION_ELEMENT) &amp;&amp;</span><br><span class=\"line\">                !nodeNameEquals(node, META_ELEMENT)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Child element is what we're looking for.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (subElement != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                error(elementName + <span class=\"string\">\" must not contain more than one sub-element\"</span>, ele);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                subElement = (Element) node;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &lt;1&gt; 是否有 ref 属性</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> hasRefAttribute = ele.hasAttribute(REF_ATTRIBUTE);</span><br><span class=\"line\">    <span class=\"comment\">// &lt;1&gt; 是否有 value 属性</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> hasValueAttribute = ele.hasAttribute(VALUE_ATTRIBUTE);</span><br><span class=\"line\">    <span class=\"comment\">// &lt;1&gt; 多个元素存在，报错，存在冲突。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((hasRefAttribute &amp;&amp; hasValueAttribute) || <span class=\"comment\">// 1. ref 和 value 都存在</span></span><br><span class=\"line\">            ((hasRefAttribute || hasValueAttribute) &amp;&amp; subElement != <span class=\"keyword\">null</span>)) &#123; <span class=\"comment\">// 2. ref he value 存在一，并且 subElement 存在</span></span><br><span class=\"line\">        error(elementName +</span><br><span class=\"line\">                <span class=\"string\">\" is only allowed to contain either 'ref' attribute OR 'value' attribute OR sub-element\"</span>, ele);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// &lt;2&gt; 将 ref 属性值，构造为 RuntimeBeanReference 实例对象</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hasRefAttribute) &#123;</span><br><span class=\"line\">        String refName = ele.getAttribute(REF_ATTRIBUTE);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.hasText(refName)) &#123;</span><br><span class=\"line\">            error(elementName + <span class=\"string\">\" contains empty 'ref' attribute\"</span>, ele);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        RuntimeBeanReference ref = <span class=\"keyword\">new</span> RuntimeBeanReference(refName);</span><br><span class=\"line\">        ref.setSource(extractSource(ele));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ref;</span><br><span class=\"line\">    <span class=\"comment\">// &lt;3&gt; 将 value 属性值，构造为 TypedStringValue 实例对象</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (hasValueAttribute) &#123;</span><br><span class=\"line\">        TypedStringValue valueHolder = <span class=\"keyword\">new</span> TypedStringValue(ele.getAttribute(VALUE_ATTRIBUTE));</span><br><span class=\"line\">        valueHolder.setSource(extractSource(ele));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> valueHolder;</span><br><span class=\"line\">    <span class=\"comment\">// &lt;4&gt; 解析子元素</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (subElement != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parsePropertySubElement(subElement, bd);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Neither child element nor \"ref\" or \"value\" attribute found.</span></span><br><span class=\"line\">        error(elementName + <span class=\"string\">\" must specify a ref or value\"</span>, ele);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>分析代码：</p>\n<ul>\n<li><1> ，提取 <code>constructor-arg</code> 的子元素、<code>ref</code> 属性值和 <code>value</code> 属性值，对其进行判断。以下两种情况是不允许存在的：<ul>\n<li><code>ref</code> 和 <code>value</code> 属性同时存在 。</li>\n<li>存在 <code>ref</code> 或者 <code>value</code> 且又有子元素。</li>\n</ul>\n</1></li>\n<li><2> ，若存在 <code>ref</code> 属性，则获取其值并将其封装进 <code>org.springframework.beans.factory.config.RuntimeBeanReference</code> 实例对象中。</2></li>\n<li><3> ，若存在 <code>value</code> 属性，则获取其值并将其封装进 <code>org.springframework.beans.factory.config.TypedStringValue</code> 实例对象中。</3></li>\n<li><4> ，如果子元素不为空，则调用 <code>parsePropertySubElement(Element ele, BeanDefinition bd)</code> 方法，对子元素进一步解析。</4></li>\n</ul>\n<h4 id=\"parsePropertySubElement\"><a href=\"#parsePropertySubElement\" class=\"headerlink\" title=\"parsePropertySubElement()\"></a>parsePropertySubElement()</h4><p>对于 <code>constructor-arg</code> 子元素的嵌套子元素，需要调用 <code>parsePropertySubElement(Element ele, BeanDefinition bd)</code> 方法，进一步处理。代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// BeanDefinitionParserDelegate.java</span></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">parsePropertySubElement</span><span class=\"params\">(Element ele, @Nullable BeanDefinition bd, @Nullable String defaultValueType)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!isDefaultNamespace(ele)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> parseNestedCustomElement(ele, bd);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nodeNameEquals(ele, BEAN_ELEMENT)) &#123; <span class=\"comment\">// bean 标签</span></span><br><span class=\"line\">\t\tBeanDefinitionHolder nestedBd = parseBeanDefinitionElement(ele, bd);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (nestedBd != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tnestedBd = decorateBeanDefinitionIfRequired(ele, nestedBd, bd);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> nestedBd;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nodeNameEquals(ele, REF_ELEMENT)) &#123; <span class=\"comment\">// ref 标签</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// A generic reference to any name of any bean.</span></span><br><span class=\"line\">\t\tString refName = ele.getAttribute(BEAN_REF_ATTRIBUTE);</span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> toParent = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!StringUtils.hasLength(refName)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// A reference to the id of another bean in a parent context.</span></span><br><span class=\"line\">\t\t\trefName = ele.getAttribute(PARENT_REF_ATTRIBUTE);</span><br><span class=\"line\">\t\t\ttoParent = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!StringUtils.hasLength(refName)) &#123;</span><br><span class=\"line\">\t\t\t\terror(<span class=\"string\">\"'bean' or 'parent' is required for &lt;ref&gt; element\"</span>, ele);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!StringUtils.hasText(refName)) &#123;</span><br><span class=\"line\">\t\t\terror(<span class=\"string\">\"&lt;ref&gt; element contains empty target attribute\"</span>, ele);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tRuntimeBeanReference ref = <span class=\"keyword\">new</span> RuntimeBeanReference(refName, toParent);</span><br><span class=\"line\">\t\tref.setSource(extractSource(ele));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ref;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nodeNameEquals(ele, IDREF_ELEMENT)) &#123; <span class=\"comment\">// idref 标签</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> parseIdRefElement(ele);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nodeNameEquals(ele, VALUE_ELEMENT)) &#123; <span class=\"comment\">// value 标签</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> parseValueElement(ele, defaultValueType);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nodeNameEquals(ele, NULL_ELEMENT)) &#123; <span class=\"comment\">// null 标签</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// It's a distinguished null value. Let's wrap it in a TypedStringValue</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// object in order to preserve the source location.</span></span><br><span class=\"line\">\t\tTypedStringValue nullHolder = <span class=\"keyword\">new</span> TypedStringValue(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t\tnullHolder.setSource(extractSource(ele));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> nullHolder;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nodeNameEquals(ele, ARRAY_ELEMENT)) &#123; <span class=\"comment\">// array 标签</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> parseArrayElement(ele, bd);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nodeNameEquals(ele, LIST_ELEMENT)) &#123; <span class=\"comment\">// list 标签</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> parseListElement(ele, bd);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nodeNameEquals(ele, SET_ELEMENT)) &#123; <span class=\"comment\">// set 标签</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> parseSetElement(ele, bd);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nodeNameEquals(ele, MAP_ELEMENT)) &#123; <span class=\"comment\">// map 标签</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> parseMapElement(ele, bd);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nodeNameEquals(ele, PROPS_ELEMENT)) &#123; <span class=\"comment\">// props 标签</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> parsePropsElement(ele);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 未知标签</span></span><br><span class=\"line\">\t\terror(<span class=\"string\">\"Unknown property sub-element: [\"</span> + ele.getNodeName() + <span class=\"string\">\"]\"</span>, ele);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"parsePropertyElements-Element-beanEle-BeanDefinition-bd\"><a href=\"#parsePropertyElements-Element-beanEle-BeanDefinition-bd\" class=\"headerlink\" title=\"parsePropertyElements(Element beanEle, BeanDefinition bd)\"></a>parsePropertyElements(Element beanEle, BeanDefinition bd)</h4><p>对于 <code>property</code> 子元素的解析，Spring 调用 <code>parsePropertyElements(Element beanEle, BeanDefinition bd)</code> 方法。代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//BeanDefinitionParserDelegate.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">parsePropertyElements</span><span class=\"params\">(Element beanEle, BeanDefinition bd)</span> </span>&#123;</span><br><span class=\"line\">\tNodeList nl = beanEle.getChildNodes();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class=\"line\">\t\tNode node = nl.item(i);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isCandidateElement(node) &amp;&amp; nodeNameEquals(node, PROPERTY_ELEMENT)) &#123; <span class=\"comment\">// property 标签</span></span><br><span class=\"line\">\t\t\tparsePropertyElement((Element) node, bd);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>遍历所有的 <code>property</code> 的子元素，然后调用 <code>parsePropertyElement((Element ele, BeanDefinition b)</code> 进行解析。</p>\n<h4 id=\"parsePropertyElement\"><a href=\"#parsePropertyElement\" class=\"headerlink\" title=\"parsePropertyElement()\"></a>parsePropertyElement()</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// BeanDefinitionParserDelegate.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">parsePropertyElement</span><span class=\"params\">(Element ele, BeanDefinition bd)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取 name 属性</span></span><br><span class=\"line\">    String propertyName = ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!StringUtils.hasLength(propertyName)) &#123;</span><br><span class=\"line\">        error(<span class=\"string\">\"Tag 'property' must have a 'name' attribute\"</span>, ele);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.parseState.push(<span class=\"keyword\">new</span> PropertyEntry(propertyName));</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果存在相同的 name ，报错</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bd.getPropertyValues().contains(propertyName)) &#123;</span><br><span class=\"line\">            error(<span class=\"string\">\"Multiple 'property' definitions for property '\"</span> + propertyName + <span class=\"string\">\"'\"</span>, ele);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 解析属性值</span></span><br><span class=\"line\">        Object val = parsePropertyValue(ele, bd, propertyName);</span><br><span class=\"line\">        <span class=\"comment\">// 创建 PropertyValue 对象</span></span><br><span class=\"line\">        PropertyValue pv = <span class=\"keyword\">new</span> PropertyValue(propertyName, val);</span><br><span class=\"line\">        parseMetaElements(ele, pv);</span><br><span class=\"line\">        pv.setSource(extractSource(ele));</span><br><span class=\"line\">        <span class=\"comment\">// 添加到 PropertyValue 集合中</span></span><br><span class=\"line\">        bd.getPropertyValues().addPropertyValue(pv);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.parseState.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>调用 <code>parsePropertyElement((Element ele, BeanDefinition b)</code> 方法，解析子元素属性值。</li>\n<li>然后，根据该值构造 PropertyValue 实例对象。</li>\n<li>最后，将 PropertyValue 添加到 BeanDefinition 中的 MutablePropertyValues 中。</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3>","categories":[],"tags":[]},{"title":"Spring系列——IoC之Bean的装载和注册","url":"http://yoursite.com/2019/10/20/Spring系列——IoC之Bean的装载和注册/","content":"<p>[TOC]</p>\n<p>Bean在容器中从发现到使用有以下过程：<strong>定位资源文件</strong>、<strong>装载 BeanDefinition</strong>、<strong>注册 BeanDefinition</strong>。</p>\n<img src=\"/2019/10/20/Spring系列——IoC之Bean的装载和注册/Bean过程.png\">\n<ul>\n<li><strong>定位资源文件</strong>：一般使用外部资源描述 Bean 对象，定位资源是指找到资源的过程。</li>\n<li><strong>装载 BeanDefinition</strong>：解析 Resource 资源，将用户定义的 Bean 表示成IoC容器的内部数据结构：BeanDefinition。<ul>\n<li>在IoC容器内部维护着一个BeanDefinition Map的数据结构。</li>\n<li>在配置文件中每一个<code>&lt;bean&gt;</code>都对应着一个 BeanDefinition 对象。</li>\n</ul>\n</li>\n<li><strong>注册 BeanDefinition</strong>：向IoC容器注册在第二步解析好的 BeanDefinition ，这个过程是通过 BeanDefinitionRegistry 接口来实现的。</li>\n</ul>\n<p>了解上述过程后，我们再来看一段代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ClassPathResource resource = <span class=\"keyword\">new</span> ClassPathResource(<span class=\"string\">\"bean.xml\"</span>); <span class=\"comment\">// &lt;1&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">DefaultListableBeanFactory factory = <span class=\"keyword\">new</span> DefaultListableBeanFactory(); <span class=\"comment\">// &lt;2&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">XmlBeanDefinitionReader reader = <span class=\"keyword\">new</span> XmlBeanDefinitionReader(factory); <span class=\"comment\">// &lt;3&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">reader.loadBeanDefinitions(resource); <span class=\"comment\">// &lt;4&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><1> 获取 xml 资源</1></li>\n<li><2> 创建 BeanFactory 容器</2></li>\n<li><3> 根据新建的 BeanFactory 创建一个 BeanDefinitionReader 对象，该 Reader 对象为资源的解析器 </3></li>\n<li><4> 装载资源</4></li>\n</ul>\n<p>从上述代码可知，资源装载主要在<4>发生，即 <code>loadBeanDefinitions(resource)</code> 方法，我们从这个方法入手，逐步分析资源装载的流程。</4></p>\n<h3 id=\"loadBeanDefinitions\"><a href=\"#loadBeanDefinitions\" class=\"headerlink\" title=\"loadBeanDefinitions()\"></a>loadBeanDefinitions()</h3><p><code>loadBeanDefinitions(Resource)</code> 方法在 <code>org.springframework.beans.factory.support.BeanDefinitionReader</code> 接口中定义，该接口的具体子类实现该方法，如上面 XmlBeanDefinitionReader 。下面显示 XmlBeanDefinitionReader 中 <code>loadBeanDefinitions(Resource)</code> 代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">loadBeanDefinitions</span><span class=\"params\">(Resource resource)</span> <span class=\"keyword\">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//将 Resource 封装为 EncodedResource ,以方便实现编码</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> loadBeanDefinitions(<span class=\"keyword\">new</span> EncodedResource(resource));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先将 Resource 封装为 EncodedResource ,以方便实现编码，然后再调用 <code>loadBeanDefinitions(EncodedResource)</code> 方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">loadBeanDefinitions</span><span class=\"params\">(EncodedResource encodedResource)</span> <span class=\"keyword\">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tAssert.notNull(encodedResource, <span class=\"string\">\"EncodedResource must not be null\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\tlogger.trace(<span class=\"string\">\"Loading XML bean definitions from \"</span> + encodedResource);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"comment\">//\t&lt;1&gt; 获取已装载的 EncodeResource集合</span></span><br><span class=\"line\">\tSet&lt;EncodedResource&gt; currentResources = <span class=\"keyword\">this</span>.resourcesCurrentlyBeingLoaded.get();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (currentResources == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\tcurrentResources = <span class=\"keyword\">new</span> HashSet&lt;&gt;(<span class=\"number\">4</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.resourcesCurrentlyBeingLoaded.set(currentResources);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!currentResources.add(encodedResource)) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 将当前资源加入记录中。如果已存在，抛出异常</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanDefinitionStoreException(</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"Detected cyclic loading of \"</span> + encodedResource + <span class=\"string\">\" - check your import definitions!\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// &lt;2&gt; 从 EncodedResource 获取封装的 Resource ，并从 Resource 中获取其中的 InputStream</span></span><br><span class=\"line\">\t\tInputStream inputStream = encodedResource.getResource().getInputStream();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tInputSource inputSource = <span class=\"keyword\">new</span> InputSource(inputStream);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (encodedResource.getEncoding() != <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">//设置编码</span></span><br><span class=\"line\">\t\t\t\tinputSource.setEncoding(encodedResource.getEncoding());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 核心逻辑部分，执行加载 BeanDefinition</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> doLoadBeanDefinitions(inputSource, encodedResource.getResource());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\tinputStream.close();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (IOException ex) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanDefinitionStoreException(</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"IOException parsing XML document from \"</span> + encodedResource.getResource(),ex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// &lt;3&gt; 从缓存中剔除该资源</span></span><br><span class=\"line\">\t\tcurrentResources.remove(encodedResource);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (currentResources.isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.resourcesCurrentlyBeingLoaded.remove();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><1> 通过 <code>resourcesCurrentlyBeingLoaded.get()</code> 代码，来获取已经加载过的资源，然后将 encodedResource 加入其中，如果 resourcesCurrentlyBeingLoaded 中已经存在该资源，则抛出 BeanDefinitionStoreException 异常。<ul>\n<li>resourcesCurrentlyBeingLoaded 是一个 ThreadLocal&lt;Set<encodedresource>&gt; 实例。</encodedresource></li>\n<li>通过这种方式来避免一个 EncodedResource 在加载时，还没加载完成，又加载自身，从而导致死循环。</li>\n<li>同样，<3>处，当一个 EncodedResource 加载完成后，需要从缓存中剔除。</3></li>\n</ul>\n</1></li>\n<li><2> 从 encodedResource 获取封装的 Resource 资源，并从 Resource 中获取相应的 InputStream，然后将 InputStream 封装为 InputSource，最后调用 <code>doLoadBeanDefinitions(InputSource inputSource, Resource resource)</code> 方法，执行加载 BeanDefinition 的真正逻辑。</2></li>\n</ul>\n<h3 id=\"doLoadBeanDefinitions\"><a href=\"#doLoadBeanDefinitions\" class=\"headerlink\" title=\"doLoadBeanDefinitions()\"></a>doLoadBeanDefinitions()</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">doLoadBeanDefinitions</span><span class=\"params\">(InputSource inputSource, Resource resource)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"keyword\">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//\t\t获取 XML Document 实例</span></span><br><span class=\"line\">\t\tDocument doc = doLoadDocument(inputSource, resource);</span><br><span class=\"line\"><span class=\"comment\">//\t\t注册 Bean 信息</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> count = registerBeanDefinitions(doc, resource);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.debug(<span class=\"string\">\"Loaded \"</span> + count + <span class=\"string\">\" bean definitions from \"</span> + resource);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (SAXParseException ex) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> XmlBeanDefinitionStoreException(resource.getDescription(),</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">\"Line \"</span> + ex.getLineNumber() + <span class=\"string\">\" in XML document from \"</span> + resource + <span class=\"string\">\" is invalid\"</span>, ex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (SAXException ex) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> XmlBeanDefinitionStoreException(resource.getDescription(),</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">\"XML document from \"</span> + resource + <span class=\"string\">\" is invalid\"</span>, ex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (ParserConfigurationException ex) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanDefinitionStoreException(resource.getDescription(),</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">\"Parser configuration exception parsing XML from \"</span> + resource, ex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (IOException ex) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanDefinitionStoreException(resource.getDescription(),</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">\"IOException parsing XML document from \"</span> + resource, ex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanDefinitionStoreException(resource.getDescription(),</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">\"Unexpected exception parsing XML document from \"</span> + resource, ex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析上述代码：</p>\n<ul>\n<li>调用 <code>doLoadDocument(inputSource, resource)</code> 获取 XML Document 实例。</li>\n<li>调用 <code>registerBeanDefinitions(Document doc, Resource resource)</code> 方法，根据获取的 Document 实例，注册 Bean 信息。</li>\n</ul>\n<h3 id=\"doLoadDocument\"><a href=\"#doLoadDocument\" class=\"headerlink\" title=\"doLoadDocument()\"></a>doLoadDocument()</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Document <span class=\"title\">doLoadDocument</span><span class=\"params\">(InputSource inputSource, Resource resource)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//\t调用 DocumentLoader.loadDocument(InputSource inputSource, EntityResolver entityResolver, ErrorHandler errorHandler, int validationMode, boolean namespaceAware) 方法，</span></span><br><span class=\"line\"><span class=\"comment\">//\t获取 XML Document 实例</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//\t调用 getValidationModeForResource(Resource resource) 方法，</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//\t获取指定资源（xml）的验证模式</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.documentLoader.loadDocument(inputSource, getEntityResolver(), <span class=\"keyword\">this</span>.errorHandler,</span><br><span class=\"line\">\t\tgetValidationModeForResource(resource), isNamespaceAware());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析上述代码：</p>\n<ul>\n<li>调用 <code>getValidationModeForResource(Resource resource)</code> 方法，获取指定资源(XML)的验证模式。</li>\n<li>调用 <code>DocumentLoader.loadDocument(InputSource inputSource, EntityResolver entityResolver,ErrorHandler errorHandler, int validationMode, boolean namespaceAware)</code> 方法，获取 XML Document 实例。</li>\n</ul>\n<h4 id=\"getValidationModeForResource\"><a href=\"#getValidationModeForResource\" class=\"headerlink\" title=\"getValidationModeForResource()\"></a>getValidationModeForResource()</h4><p><code>getValidationModeForResource(Resource resource)</code> 可以获取资源的验证模式，通过验证模式我们可以验证资源文件的准确性。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 四种验证默认</span></span><br><span class=\"line\"><span class=\"comment\">//禁用验证模式 </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> VALIDATION_NONE = XmlValidationModeDetector.VALIDATION_NONE;</span><br><span class=\"line\"><span class=\"comment\">//自动获取验证模式</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> VALIDATION_AUTO = XmlValidationModeDetector.VALIDATION_AUTO;</span><br><span class=\"line\"><span class=\"comment\">//DTD</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> VALIDATION_DTD = XmlValidationModeDetector.VALIDATION_DTD;</span><br><span class=\"line\"><span class=\"comment\">//XSD</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> VALIDATION_XSD = XmlValidationModeDetector.VALIDATION_XSD;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 默认是VALIDATION_AUTO</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> validationMode = VALIDATION_AUTO;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">getValidationModeForResource</span><span class=\"params\">(Resource resource)</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//\t获取验证模式</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> validationModeToUse = getValidationMode();</span><br><span class=\"line\"><span class=\"comment\">//\t如果手动指定，则直接返回</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (validationModeToUse != VALIDATION_AUTO) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> validationModeToUse;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"comment\">//\t自动获取验证模式</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> detectedMode = detectValidationMode(resource);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (detectedMode != VALIDATION_AUTO) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> detectedMode;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 最后，使用 VALIDATION_XSD 做为默认</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> VALIDATION_XSD;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析上述代码：</p>\n<ul>\n<li>通过 <code>int validationModeToUse = getValidationMode()</code> 直接获取验证模式，如果手动指定验证模式，则直接返回；若未手动指定验证模式，则自动获取。</li>\n<li>通过 <code>detectValidationMode()</code> 自动获取验证模式。</li>\n<li>最后使用 VALIDATION_XSD 作为默认验证模式。</li>\n</ul>\n<p>我们接下来看一下自动获取验证模式的语句 <code>detectValidationMode()</code> ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">detectValidationMode</span><span class=\"params\">(Resource resource)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//资源不可读，抛出异常</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (resource.isOpen()) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanDefinitionStoreException(</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"Passed-in Resource [\"</span> + resource + <span class=\"string\">\"] contains an open stream: \"</span> +</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"cannot determine validation mode automatically. Either pass in a Resource \"</span> +</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"that is able to create fresh streams, or explicitly specify the validationMode \"</span> + <span class=\"string\">\"on your XmlBeanDefinitionReader instance.\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//打开输入流</span></span><br><span class=\"line\">\tInputStream inputStream;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tinputStream = resource.getInputStream();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (IOException ex) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanDefinitionStoreException(</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"Unable to determine validation mode for [\"</span> + resource + <span class=\"string\">\"]: cannot open InputStream. \"</span> + <span class=\"string\">\"Did you attempt to load directly from a SAX InputSource without specifying the \"</span> +\t<span class=\"string\">\"validationMode on your XmlBeanDefinitionReader instance?\"</span>, ex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//核心语句 ，调用 XmlValidationModeDetector.detectValidationMode(InputStream inputStream) 方法获取相应的验证模式</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.validationModeDetector.detectValidationMode(inputStream);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (IOException ex) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanDefinitionStoreException(<span class=\"string\">\"Unable to determine validation mode for [\"</span> + resource + <span class=\"string\">\"]: an error occurred whilst reading from the InputStream.\"</span>, ex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"XmlValidationModeDetector-类\"><a href=\"#XmlValidationModeDetector-类\" class=\"headerlink\" title=\"XmlValidationModeDetector 类\"></a>XmlValidationModeDetector 类</h5><p><code>org.springframework.util.xml.XmlValidationModeDetector</code> ，XML 验证模式探测器。该类核心方法是 <code>detectValidationMode()</code> ,主要功能是判断 XML 文件验证方式是 XSD 还是 DTD 。这里贴出一张判断流程图，来源于 <a href=\"https://blog.csdn.net/ljz2016/article/details/82686884\" target=\"_blank\" rel=\"noopener\">spring源码（六）–XmlValidationModeDetector（获取xml文档校验模式）</a>。</p>\n<img src=\"/2019/10/20/Spring系列——IoC之Bean的装载和注册/判断验证方式流程图.png\">\n<h4 id=\"DocumentLoader-loadDocument\"><a href=\"#DocumentLoader-loadDocument\" class=\"headerlink\" title=\"DocumentLoader.loadDocument()\"></a>DocumentLoader.loadDocument()</h4><h5 id=\"DocumentLoader\"><a href=\"#DocumentLoader\" class=\"headerlink\" title=\"DocumentLoader\"></a>DocumentLoader</h5><p><code>org.springframework.beans.factory.xml.DocumentLoader</code> 是一个接口，定义从资源文件加载到转换为 Document 的功能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DocumentLoader</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Document <span class=\"title\">loadDocument</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\tInputSource inputSource, EntityResolver entityResolver,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\tErrorHandler errorHandler, <span class=\"keyword\">int</span> validationMode, <span class=\"keyword\">boolean</span> namespaceAware)</span> <span class=\"keyword\">throws</span> Exception</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>inputSource: 方法参数，加载 Document 的 Resource 资源。</li>\n<li>entityResolver: 方法参数，解析文件的解析器。</li>\n<li>errorHandler: 方法参数，处理加载 Document 对象的过程的错误。</li>\n<li>validationMode: 方法参数，验证模式。</li>\n<li>namespaceAware: 方法参数，命名空间支持。如果要提供对 XML 名称空间的支持，则需要值为 true 。</li>\n</ul>\n<h5 id=\"DefaultDocumentLoader\"><a href=\"#DefaultDocumentLoader\" class=\"headerlink\" title=\"DefaultDocumentLoader\"></a>DefaultDocumentLoader</h5><p><code>org.springframework.beans.factory.xml.DefaultDocumentLoader</code> 是 DefaultDocumentLoader 的默认实现类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Document <span class=\"title\">loadDocument</span><span class=\"params\">(InputSource inputSource, EntityResolver entityResolver,ErrorHandler errorHandler, <span class=\"keyword\">int</span> validationMode, <span class=\"keyword\">boolean</span> namespaceAware)</span> <span class=\"keyword\">throws</span> Exceptio</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//\t创建 DocumentBuilderFactory</span></span><br><span class=\"line\">\tDocumentBuilderFactory factory = createDocumentBuilderFactory(validationMode, namespaceAware);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\tlogger.trace(<span class=\"string\">\"Using JAXP provider [\"</span> + factory.getClass().getName() + <span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"comment\">//\t创建 DocumentBuilder</span></span><br><span class=\"line\">\tDocumentBuilder builder = createDocumentBuilder(factory, entityResolver, errorHandler);</span><br><span class=\"line\"><span class=\"comment\">//\t解析InputSource 返回 Document 对象</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> builder.parse(inputSource);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"EntityResolver\"><a href=\"#EntityResolver\" class=\"headerlink\" title=\"EntityResolver\"></a>EntityResolver</h5><p><code>DocumentLoader.loadDocument()</code> 方法中有一个参数 EntityResolver ，该参数通过 <code>XmlBeanDefinitionReader.getEntityResolver()</code> 方法来获取的。</p>\n<p>EntityResolver 的作用: 通过实现它，应用可以自定义如何寻找【验证文件】的逻辑。</p>\n<p>EntityResolver 有四个子类，分别是：</p>\n<ol>\n<li><code>org.springframework.beans.factory.xm.BeansDtdResolver</code> ：实现 EntityResolver 接口，Spring Bean dtd 解码器，用来从 classpath 或者 jar 文件中加载 dtd 。</li>\n<li><code>org.springframework.beans.factory.xml.PluggableSchemaResolver</code> ，实现 EntityResolver 接口，读取 classpath 下的所有 <code>&quot;META-INF/spring.schemas&quot;</code> 成一个 namespaceURI 与 Schema 文件地址的 map 。</li>\n<li><code>org.springframework.beans.factory.xml.DelegatingEntityResolver</code> ：实现 EntityResolver 接口，分别代理 dtd 的 BeansDtdResolver 和 xml schemas 的 PluggableSchemaResolver 。</li>\n<li><code>org.springframework.beans.factory.xml.ResourceEntityResolver</code>：继承自 DelegatingEntityResolver 类，通过 ResourceLoader 来解析实体的引用。</li>\n</ol>\n<p><code>getEntityResolver()</code> 方法作用是返回指定的文件解析器，如果没有指定，则构造一个未指定的默认解析器。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> EntityResolver <span class=\"title\">getEntityResolver</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.entityResolver == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\tResourceLoader resourceLoader = getResourceLoader();</span><br><span class=\"line\"><span class=\"comment\">// 如果 ResourceLoader 不为 null，则根据指定的 ResourceLoader 创建一个 ResourceEntityResolver 对象</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (resourceLoader != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.entityResolver = <span class=\"keyword\">new</span> ResourceEntityResolver(resourceLoader);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"><span class=\"comment\">// 如果 ResourceLoader 为 null ，则创建 一个 DelegatingEntityResolver 对象。该 Resolver 委托给默认的 BeansDtdResolver 和 PluggableSchemaResolver </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.entityResolver = <span class=\"keyword\">new</span> DelegatingEntityResolver(getBeanClassLoader());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.entityResolver;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"registerBeanDefinitions\"><a href=\"#registerBeanDefinitions\" class=\"headerlink\" title=\"registerBeanDefinitions()\"></a>registerBeanDefinitions()</h3><p>获取 XML Document 对象后，会根据该对象和 Resource 资源对象调用 <code>XmlBeanDefinitionReader.registerBeanDefinitions(Document doc, Resource resource)</code> 方法，开始注册 BeanDefinitions 。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  XmlBeanDefinitionReader.java</span></span><br><span class=\"line\"><span class=\"comment\">//\t注册BeanDefinition</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">registerBeanDefinitions</span><span class=\"params\">(Document doc, Resource resource)</span> <span class=\"keyword\">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// &lt;1&gt; 创建 BeanDefinitionDocumentReader 对象</span></span><br><span class=\"line\">\tBeanDefinitionDocumentReader documentReader = createBeanDefinitionDocumentReader();</span><br><span class=\"line\">\t<span class=\"comment\">// &lt;2&gt; 获取已注册的 BeanDefinition 数量</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> countBefore = getRegistry().getBeanDefinitionCount();</span><br><span class=\"line\">\t<span class=\"comment\">// &lt;3&gt; 创建 XmlReaderContext 对象</span></span><br><span class=\"line\">\t<span class=\"comment\">// &lt;4&gt; 注册 BeanDefinition</span></span><br><span class=\"line\">\tdocumentReader.registerBeanDefinitions(doc, createReaderContext(resource));</span><br><span class=\"line\">\t<span class=\"comment\">// &lt;5&gt; 计算新注册的 BeanDefinition 数量</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> getRegistry().getBeanDefinitionCount() - countBefore;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析上述代码：</p>\n<ul>\n<li><1>处，调用 <code>createBeanDefinitionDocumentReader()</code> 方法，实例化 BeanDefinitionDocumentReader 对象。</1></li>\n<li><2>处，调用 <code>BeanDefinitionRegistry.getBeanDefinitionCount()</code> 方法，获取已注册的 BeanDefinition 数量。</2></li>\n<li><3>处，调用 <code>createReaderContext(Resource resource)</code>方法，创建XmlReaderContext对象。</3></li>\n<li><4>处，调用 <code>BeanDefinitionDocumentReader.registerBeanDefinitions(Document doc, XmlReaderContext readerContext)</code> 方法，读取 XML 元素，注册 BeanDefinition 。</4></li>\n<li><5>处，计算新注册的 BeanDefinition 数量。</5></li>\n</ul>\n<h4 id=\"createBeanDefinitionDocumentReader\"><a href=\"#createBeanDefinitionDocumentReader\" class=\"headerlink\" title=\"createBeanDefinitionDocumentReader()\"></a>createBeanDefinitionDocumentReader()</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> BeanDefinitionDocumentReader <span class=\"title\">createBeanDefinitionDocumentReader</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> BeanUtils.instantiateClass(<span class=\"keyword\">this</span>.documentReaderClass);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中，documentReaderClass 的默认值为 <code>DefaultBeanDefinitionDocumentReader.class</code> 。 </p>\n<h4 id=\"BeanDefinitionDocumentReader-registerBeanDefinitions\"><a href=\"#BeanDefinitionDocumentReader-registerBeanDefinitions\" class=\"headerlink\" title=\"BeanDefinitionDocumentReader.registerBeanDefinitions()\"></a>BeanDefinitionDocumentReader.registerBeanDefinitions()</h4><p>DefaultBeanDefinitionDocumentReader 是 BeanDefinitionDocumentReader 接口的唯一默认实现类。</p>\n<p>首先先来看下 BeanDefinitionDocumentReader 接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// BeanDefinitionDocumentReader接口定义</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BeanDefinitionDocumentReader</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">registerBeanDefinitions</span><span class=\"params\">(Document doc, XmlReaderContext readerContext)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> BeanDefinitionStoreException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从给定的 Document 对象中解析定义的 BeanDefinition 并将他们注册到注册表中。方法接收两个参数：</p>\n<ol>\n<li><code>doc</code>：待解析的 Document 对象。</li>\n<li><code>readerContext</code>:解析器的当前上下文，包括目标注册表和被解析的资源。它是根据 Resource 来创建的。</li>\n</ol>\n<p>接下来继续看下 DefaultBeanDefinitionDocumentReader 类，我们重点关注 <code>registerBeanDefinitions()</code> 方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader 类</span></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> XmlReaderContext readerContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerBeanDefinitions</span><span class=\"params\">(Document doc, XmlReaderContext readerContext)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.readerContext = readerContext;</span><br><span class=\"line\">    <span class=\"comment\">// 获得 XML Document Root Element</span></span><br><span class=\"line\">   \t<span class=\"comment\">// 执行注册 BeanDefinition</span></span><br><span class=\"line\">\tdoRegisterBeanDefinitions(doc.getDocumentElement());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"BeanDefinitionDocumentReader-doRegisterBeanDefinitions\"><a href=\"#BeanDefinitionDocumentReader-doRegisterBeanDefinitions\" class=\"headerlink\" title=\"BeanDefinitionDocumentReader.doRegisterBeanDefinitions()\"></a>BeanDefinitionDocumentReader.doRegisterBeanDefinitions()</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doRegisterBeanDefinitions</span><span class=\"params\">(Element root)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 记录老的 BeanDefinitionParserDelegate 对象</span></span><br><span class=\"line\">\tBeanDefinitionParserDelegate parent = <span class=\"keyword\">this</span>.delegate;</span><br><span class=\"line\">\t<span class=\"comment\">// &lt;1&gt; 创建 BeanDefinitionParserDelegate 对象，并进行设置到 delegate</span></span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.delegate = createDelegate(getReaderContext(), root, parent);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// &lt;2&gt; 检查 &lt;beans /&gt; 根标签的命名空间是否为空，或者是 http://www.springframework.org/schema/beans</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.delegate.isDefaultNamespace(root)) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// &lt;2.1&gt; 处理 profile 属性。可参见《Spring3自定义环境配置 &lt;beans profile=\"\"&gt;》http://nassir.iteye.com/blog/1535799</span></span><br><span class=\"line\">\t\tString profileSpec = root.getAttribute(PROFILE_ATTRIBUTE);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (StringUtils.hasText(profileSpec)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// &lt;2.2&gt; 使用分隔符切分，可能有多个 profile</span></span><br><span class=\"line\">\t\t\tString[] specifiedProfiles = StringUtils.tokenizeToStringArray(</span><br><span class=\"line\">\t\t\t\t\tprofileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// &lt;2.3&gt; 如果所有 profile 都无效，则不进行注册</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!getReaderContext().getEnvironment().acceptsProfiles(specifiedProfiles)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\t\tlogger.debug(<span class=\"string\">\"Skipped XML bean definition file due to specified profiles [\"</span> + profileSpec +</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"string\">\"] not matching: \"</span> + getReaderContext().getResource());</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t解析前处理</span></span><br><span class=\"line\">\tpreProcessXml(root);</span><br><span class=\"line\"><span class=\"comment\">//\t解析处理</span></span><br><span class=\"line\">\tparseBeanDefinitions(root, <span class=\"keyword\">this</span>.delegate);</span><br><span class=\"line\"><span class=\"comment\">//\t解析后处理</span></span><br><span class=\"line\">\tpostProcessXml(root);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t设置 delegate 回老的 BeanDefinitionParserDelegate 对象</span></span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.delegate = parent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析上面代码：</p>\n<ul>\n<li><1>处，创建 BeanDefinitionParserDelegate 对象，并进行设置到 delegate 。BeanDefinitionParserDelegate 是一个重要的类，它负责解析 BeanDefinition 。</1></li>\n<li><2>处，检查 <code>&lt;beans /&gt;</code> 根标签的命名空间是否为空，或者是 <code>http://www.springframework.org/schema/beans</code>。<ul>\n<li>&lt;2.1&gt;处，判断是否 <code>&lt;beans /&gt;</code> 上配置了 <code>profile</code> 属性。</li>\n<li>&lt;2.2&gt;处，使用分隔符切分，可能有多个 profile。</li>\n<li>&lt;2.3&gt;处，判断，如果所有 profile 都无效，则 return 不进行注册。</li>\n</ul>\n</2></li>\n<li><4>处，调用 <code>parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate)</code> 方法，进行解析逻辑。</4></li>\n<li><3>/<5>处，解析前后的处理，目前这两个方法都是空实现，交由子类来实现。代码如下：</5></3></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">preProcessXml</span><span class=\"params\">(Element root)</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">postProcessXml</span><span class=\"params\">(Element root)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>我们再重点看一下 <code>parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate)</code> 的代码，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">parseBeanDefinitions</span><span class=\"params\">(Element root, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// &lt;1&gt; 如果根节点使用默认命名空间，执行默认解析</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (delegate.isDefaultNamespace(root)) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//遍历根节点</span></span><br><span class=\"line\">\t\tNodeList nl = root.getChildNodes();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class=\"line\">\t\t\tNode node = nl.item(i);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (node <span class=\"keyword\">instanceof</span> Element) &#123;</span><br><span class=\"line\">\t\t\t\tElement ele = (Element) node;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// &lt;1&gt; 如果该节点使用默认命名空间，执行默认解析</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (delegate.isDefaultNamespace(ele)) &#123;</span><br><span class=\"line\">\t\t\t\t\tparseDefaultElement(ele, delegate);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 如果该节点非默认命名空间，执行自定义解析</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tdelegate.parseCustomElement(ele);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// &lt;2&gt; 如果根节点非默认命名空间，执行自定义解析</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tdelegate.parseCustomElement(root);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Spring 有两种 Bean 声明方式：</p>\n<ol>\n<li>配置文件式声明： <code>&lt;bean id=&quot;studentService&quot; class=&quot;org.springframework.core.StudentService&quot; /&gt;</code> ，对应<1>处。</1></li>\n<li>自定义注解方式： <code>&lt;tx:annotation-driven&gt;</code> ,对应<2>处。</2></li>\n</ol>\n<ul>\n<li><1>处，如果根节点或子节点使用默认命名空间，调用 <code>parseDefaultElement(Element ele, BeanDefinitionParserDelegate delegate)</code> 方法，执行默认解析。</1></li>\n<li><2>处，如果根节点或子节点不使用默认命名空间，调用 <code>BeanDefinitionParserDelegate.parseCustomElement(Element ele)</code> 方法，执行自定义解析。</2></li>\n</ul>\n<h4 id=\"createReaderContext\"><a href=\"#createReaderContext\" class=\"headerlink\" title=\"createReaderContext\"></a>createReaderContext</h4><p><code>createReaderContext(Resource resource)</code> 方法，创建 XmlReaderContext 对象。代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// XmlBeanDefinitionReader.java</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> ProblemReporter problemReporter = <span class=\"keyword\">new</span> FailFastProblemReporter();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> ReaderEventListener eventListener = <span class=\"keyword\">new</span> EmptyReaderEventListener();\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> SourceExtractor sourceExtractor = <span class=\"keyword\">new</span> NullSourceExtractor();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> NamespaceHandlerResolver namespaceHandlerResolver;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根据 Resource 创建 XmlReaderContext</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> XmlReaderContext <span class=\"title\">createReaderContext</span><span class=\"params\">(Resource resource)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> XmlReaderContext(resource, <span class=\"keyword\">this</span>.problemReporter, <span class=\"keyword\">this</span>.eventListener,</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.sourceExtractor, <span class=\"keyword\">this</span>, getNamespaceHandlerResolver());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>本文重点介绍了 <strong>XmlBeanDefinitionReader</strong> 类中的重点方法，涉及 Bean 在容器中的<strong>装载</strong>、<strong>注册</strong>过程，其中装载过程对应着 <code>loadBeanDefinitions()</code> 、 <code>doLoadBeanDefinitions()</code> 、 <code>doLoadDocument()</code> ，注册过程对应着 <code>registerBeanDefinitions()</code> 。下面是流程图：</p>\n<p>// todo<br></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ol>\n<li><a href=\"http://svip.iocoder.cn/Spring/IoC-load-BeanDefinitions/\" target=\"_blank\" rel=\"noopener\">【死磕 Spring】—— IoC 之加载 BeanDefinition</a></li>\n<li><a href=\"http://svip.iocoder.cn/Spring/IoC-Validation-Mode-For-Resource/\" target=\"_blank\" rel=\"noopener\">【死磕 Spring】—— IoC 之获取验证模型</a></li>\n<li><a href=\"http://svip.iocoder.cn/Spring/IoC-load-Document/\" target=\"_blank\" rel=\"noopener\">【死磕 Spring】—— IoC 之获取 Document 对象</a></li>\n<li><a href=\"http://svip.iocoder.cn/Spring/IoC-register-BeanDefinitions/\" target=\"_blank\" rel=\"noopener\">【死磕 Spring】—— IoC 之注册 BeanDefinitions</a></li>\n</ol>\n","categories":[],"tags":[]},{"title":"Spring系列——IoC之Resource和ResourceLoader","url":"http://yoursite.com/2019/10/13/Spring系列——IoC之Resource和ResourceLoader/","content":"<p>Java SE中有一个标准类 <code>java.net.URL</code>，该类在 Java SE 中的定位为统一资源定位器（Uniform Resource Locator），但是我们知道其实现基本只限于网络形式发布的资源的查找和定位。然而，实际上资源的定义比较广泛，除了网络形式的资源，还有以二进制形式存在的、以文件形式存在的、以字节流形式存在的等等。而且它可以存在于任何场所，比如网络、文件系统、应用程序中。所以 <code>java.net.URL</code> 的局限性迫使Spring必须实现自己的资源加载策略，该资源加载策略需要满足如下要求：</p>\n<ol>\n<li>职能划分清楚。资源的定义和资源的加载应该要有一个清晰的界限；</li>\n<li>统一的抽象。统一的资源定义和资源加载策略。资源加载后要返回统一的抽象给客户端，客户端要对资源进行怎样的处理，应该由抽象资源接口来界定。</li>\n</ol>\n<h3 id=\"统一资源：Resource体系\"><a href=\"#统一资源：Resource体系\" class=\"headerlink\" title=\"统一资源：Resource体系\"></a>统一资源：Resource体系</h3>\n<h4 id=\"Resource-接口\"><a href=\"#Resource-接口\" class=\"headerlink\" title=\"Resource 接口\"></a>Resource 接口</h4><p><code>org.springframework.core.io.Resource</code> 为 Spring 框架所有资源的抽象和访问接口，它继承 <code>org.springframework.core.io.InputStreamSource</code>接口。作为所有资源的统一抽象，Resource 定义了一些通用的方法，由子类 <code>AbstractResource</code> 提供统一的默认实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Resource</span> <span class=\"keyword\">extends</span> <span class=\"title\">InputStreamSource</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t判断资源是否存在</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">exists</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t判断资源是否可读</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isReadable</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> exists();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t资源是否已被打开</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isOpen</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t判断是否是文件</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isFile</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t返回资源的URL句柄</span></span><br><span class=\"line\">\t<span class=\"function\">URL <span class=\"title\">getURL</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t返回资源的URI句柄</span></span><br><span class=\"line\">\t<span class=\"function\">URI <span class=\"title\">getURI</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t返回资源的File句柄</span></span><br><span class=\"line\">\t<span class=\"function\">File <span class=\"title\">getFile</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t获取资源的可读字节管道</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">default</span> ReadableByteChannel <span class=\"title\">readableChannel</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Channels.newChannel(getInputStream());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t获取资源的内容长度</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">contentLength</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t获取最后修改时间</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">lastModified</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t根据资源的相对路径创建新资源</span></span><br><span class=\"line\">\t<span class=\"function\">Resource <span class=\"title\">createRelative</span><span class=\"params\">(String relativePath)</span> <span class=\"keyword\">throws</span> IOException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t获取资源的文件名</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"function\">String <span class=\"title\">getFilename</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t获取资源描述</span></span><br><span class=\"line\">\t<span class=\"function\">String <span class=\"title\">getDescription</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"子接口：ContextResource和WritableResource\"><a href=\"#子接口：ContextResource和WritableResource\" class=\"headerlink\" title=\"子接口：ContextResource和WritableResource\"></a>子接口：ContextResource和WritableResource</h4><p>ContextResource和WritableResource均是Resource的子接口，除拥有Resource的全部方法外，ContextResource接口还有下列方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//\t从关闭的上下文Context中获取资源的路径</span></span><br><span class=\"line\">\t<span class=\"function\">String <span class=\"title\">getPathWithinContext</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n<p><code>getPathWithContext()</code> 方法返回相对于Context的路径，如ServletContext、PortletContext、classpath、FileSystem等，在Spring core中它有两个实现类FileSystemContextResource、ClassPathContextResource，分别是FileSystemResourceLoader和DefaultResourceLoader中的内部类，他们对getPathWithContext()方法的实现只是简单的返回path值。</p>\n<p>另外，在Spring Web模块中，有一个ServletContextResource实现类，它使用ServletContext和path作为参数构造，getInputStream、getURL、getURI、getFile等方法中将实现代理给ServletContext，其中getPathWithContext方法依然返回path字符串。</p>\n<p>WritableResource接口新增三个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//\t判断是否可写,默认可写</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isWritable</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t获取输出流</span></span><br><span class=\"line\"><span class=\"function\">OutputStream <span class=\"title\">getOutputStream</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t获取写入字节管道</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">default</span> WritableByteChannel <span class=\"title\">writableChannel</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Channels.newChannel(getOutputStream());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因此WritableResource的实现类拥有了写资源的功能。</p>\n<h4 id=\"抽象类：AbstractResource\"><a href=\"#抽象类：AbstractResource\" class=\"headerlink\" title=\"抽象类：AbstractResource\"></a>抽象类：AbstractResource</h4><p><code>org.springframework.core.io.AbstractResource</code> ，为 Resource 接口的<strong>默认抽象实现</strong>。它实现了Resource接口的<strong>大部分的公共实现</strong>。当我们自定义资源时，只需继承AbstractResource抽象类，然后覆盖相应的方法即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractResource</span> <span class=\"keyword\">implements</span> <span class=\"title\">Resource</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t 判断文件是否存在，若判断过程产生异常（因为会调用SecurityManager来判断），就关闭对应的流</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">exists</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Try file existence: can we find the file in the file system?</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isFile()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> getFile().exists();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">catch</span> (IOException ex) &#123;</span><br><span class=\"line\">\t\t\t\tLog logger = LogFactory.getLog(getClass());</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\t\tlogger.debug(<span class=\"string\">\"Could not retrieve File for existence check of \"</span> + getDescription(), ex);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 产生异常,关闭输入流</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tgetInputStream().close();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">\t\t\tLog logger = LogFactory.getLog(getClass());</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\tlogger.debug(<span class=\"string\">\"Could not retrieve InputStream for existence check of \"</span> + getDescription(), ex);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t是否可读</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isReadable</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> exists();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t是否打开,返回false,未打开</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isOpen</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t是否是文件,返回false,不是文件</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isFile</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t抛出 FileNotFoundException 异常，交给子类实现</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> URL <span class=\"title\">getURL</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> FileNotFoundException(getDescription() + <span class=\"string\">\" cannot be resolved to URL\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t基于 getURL() 返回的 URL 构建 URI</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> URI <span class=\"title\">getURI</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\t\tURL url = getURL();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//URL格式化后返回</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> ResourceUtils.toURI(url);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (URISyntaxException ex) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NestedIOException(<span class=\"string\">\"Invalid URI [\"</span> + url + <span class=\"string\">\"]\"</span>, ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t抛出 FileNotFoundException 异常，交给子类实现</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> File <span class=\"title\">getFile</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> FileNotFoundException(getDescription() + <span class=\"string\">\" cannot be resolved to absolute file path\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t根据 getInputStream() 的返回结果构建 ReadableByteChannel</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> ReadableByteChannel <span class=\"title\">readableChannel</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Channels.newChannel(getInputStream());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t获取资源的长度</span></span><br><span class=\"line\"><span class=\"comment\">//\t资源内容长度实际就是资源的字节长度，通过全部读取一遍来判断</span></span><br><span class=\"line\"><span class=\"comment\">//\t一般在子类中重写</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">contentLength</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\t\tInputStream is = getInputStream();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">long</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//\t\t\t一次最多读取256字节</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">byte</span>[] buf = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">256</span>];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> read;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> ((read = is.read(buf)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\tsize += read;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> size;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tis.close();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">catch</span> (IOException ex) &#123;</span><br><span class=\"line\">\t\t\t\tLog logger = LogFactory.getLog(getClass());</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\t\tlogger.debug(<span class=\"string\">\"Could not close content-length InputStream for \"</span> + getDescription(), ex);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t返回资源最后修改时间</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">lastModified</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\t\tFile fileToCheck = getFileForLastModifiedCheck();</span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> lastModified = fileToCheck.lastModified();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (lastModified == <span class=\"number\">0L</span> &amp;&amp; !fileToCheck.exists()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> FileNotFoundException(getDescription() +</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">\" cannot be resolved in the file system for checking its last-modified timestamp\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> lastModified;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t交给子类重写</span></span><br><span class=\"line\"><span class=\"comment\">//\t子类没有实现则返回文件</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> File <span class=\"title\">getFileForLastModifiedCheck</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> getFile();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t抛出 FileNotFoundException 异常，交给子类实现</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Resource <span class=\"title\">createRelative</span><span class=\"params\">(String relativePath)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> FileNotFoundException(<span class=\"string\">\"Cannot create a relative resource for \"</span> + getDescription());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t获取资源名称,默认返回null,交给子类实现</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getFilename</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(@Nullable Object other)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (<span class=\"keyword\">this</span> == other || (other <span class=\"keyword\">instanceof</span> Resource &amp;&amp;</span><br><span class=\"line\">\t\t\t\t((Resource) other).getDescription().equals(getDescription())));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> getDescription().hashCode();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> getDescription();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"抽象子类：AbstractFileResolvingResource\"><a href=\"#抽象子类：AbstractFileResolvingResource\" class=\"headerlink\" title=\"抽象子类：AbstractFileResolvingResource\"></a>抽象子类：AbstractFileResolvingResource</h4><p>这个抽象类继承自AbstractResource，重写了AbstractResource的大部分方法，主要作用是将URL解析为File引用，其具体实现的子类有 UrlResource 和 ClassPathResource 。</p>\n<h4 id=\"AbstractResource的实现子类\"><a href=\"#AbstractResource的实现子类\" class=\"headerlink\" title=\"AbstractResource的实现子类\"></a>AbstractResource的实现子类</h4><p>从上面 Resource 体系图可知，AbstractResource 有多种实现类，分别对应着不同的资源。</p>\n<h5 id=\"ByteArrayResource\"><a href=\"#ByteArrayResource\" class=\"headerlink\" title=\"ByteArrayResource\"></a>ByteArrayResource</h5><p>ByteArrayResource是对<strong>二进制数组</strong>提供的数据的封装,每次调用getInputStream方法时都会以这个二进制数组作为源创建一个ByteArrayInputStream。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> InputStream <span class=\"title\">getInputStream</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ByteArrayInputStream(<span class=\"keyword\">this</span>.byteArray);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"FileSystemResource\"><a href=\"#FileSystemResource\" class=\"headerlink\" title=\"FileSystemResource\"></a>FileSystemResource</h5><p>FileSystemResource是对 <code>java.io.File</code> 类型资源的封装，在构建FileSystemResource时可以传入File对象或路径字符串（这里的路径可以是相对路径，相对路径是相对于System.getProperty(“user.dir”)的值所在的路径，也可以是绝对路径，也可以是“file:”开头的路径值），实现 了WritableResource 接口。从 Spring Framework 5.0 开始，FileSystemResource 使用 NIO2 API进行读/写交互。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> OutputStream <span class=\"title\">getOutputStream</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Files.newOutputStream(<span class=\"keyword\">this</span>.filePath);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t利用相对路径返回Resource对象,注意相对路径的计算方法</span></span><br><span class=\"line\"><span class=\"comment\">//  StringUtils.applyRelativePath()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Resource <span class=\"title\">createRelative</span><span class=\"params\">(String relativePath)</span> </span>&#123;</span><br><span class=\"line\">\tString pathToUse = StringUtils.applyRelativePath(<span class=\"keyword\">this</span>.path, relativePath);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (<span class=\"keyword\">this</span>.file != <span class=\"keyword\">null</span> ? <span class=\"keyword\">new</span> FileSystemResource(pathToUse) :</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> FileSystemResource(<span class=\"keyword\">this</span>.filePath.getFileSystem(), pathToUse));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"UrlResource\"><a href=\"#UrlResource\" class=\"headerlink\" title=\"UrlResource\"></a>UrlResource</h5><p>UrlResource是对 URL和URI 类型资源的封装。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//从URL中获取二进制输入流</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> InputStream <span class=\"title\">getInputStream</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//使用URL.openConnection()方法获取URLConnection</span></span><br><span class=\"line\">\tURLConnection con = <span class=\"keyword\">this</span>.url.openConnection();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//设置是否使用缓存</span></span><br><span class=\"line\">\tResourceUtils.useCachesIfNecessary(con);</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//获取二进制输入流</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> con.getInputStream();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (IOException ex) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果打开了资源,需要关闭http连接</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (con <span class=\"keyword\">instanceof</span> HttpURLConnection) &#123;</span><br><span class=\"line\">\t\t\t((HttpURLConnection) con).disconnect();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"ClassPathResource\"><a href=\"#ClassPathResource\" class=\"headerlink\" title=\"ClassPathResource\"></a>ClassPathResource</h5><p>ClassPathResource 是对 classpath 下资源的封装，资源从<strong>系统的类路径中</strong>加载。使用路径名、 ClassLoader 或者 Class 来创建资源。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//\t获取类路径下的资源的二进制流</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> InputStream <span class=\"title\">getInputStream</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\tInputStream is;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.clazz != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\tis = <span class=\"keyword\">this</span>.clazz.getResourceAsStream(<span class=\"keyword\">this</span>.path);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.classLoader != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\tis = <span class=\"keyword\">this</span>.classLoader.getResourceAsStream(<span class=\"keyword\">this</span>.path);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tis = ClassLoader.getSystemResourceAsStream(<span class=\"keyword\">this</span>.path);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (is == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> FileNotFoundException(getDescription() + <span class=\"string\">\" cannot be opened because it does not exist\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> is;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"InputStreamResource\"><a href=\"#InputStreamResource\" class=\"headerlink\" title=\"InputStreamResource\"></a>InputStreamResource</h5><p>InputStreamResource 是对 InputStream 的封装，接收 InputStream 作为构造方法参数，它的 isOpen 总是返回 true，并且只能被读取一次（即 getInputStream 方法只能被调用一次），exists、 isReadable 方法也总是返回 true。由于不能被多次读取，只有当不用多次读取的时候才使用该类，并且只有当没有其他可用 Resource 类时才使用该类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//只能读取一次，读取多次时会抛出异常</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> InputStream <span class=\"title\">getInputStream</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException, IllegalStateException </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.read) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"InputStream has already been read - \"</span> +</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">\"do not use InputStreamResource if a stream needs to be read multiple times\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.read = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.inputStream;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"VfsResource\"><a href=\"#VfsResource\" class=\"headerlink\" title=\"VfsResource\"></a>VfsResource</h5><p>VfsResource 代表 Jboss 虚拟文件系统资源。Jboss VFS(Virtual File System) 框架是一个文件系统资源访问的抽象层，它能一致的访问物理文件系统、jar资源、zip资源、war资源等，VFS 能把这些资源一致的映射到一个目录上，访问它们就像访问物理文件资源一样，而其实这些资源不存在于物理文件系统。</p>\n<h5 id=\"DescriptiveResource\"><a href=\"#DescriptiveResource\" class=\"headerlink\" title=\"DescriptiveResource\"></a>DescriptiveResource</h5><p>DescriptiveResource 是对非物理资源的 Description 的封装。它实现了 getDescription() 方法。Resource 中 Description 属性主要用于错误处理时能更加准确的打印出错位置的信息。DescriptiveResource 提供对那些需要提供 Resource 接口中的 Description 属性作为错误打印信息的方法自定义的描述信息。比如在 BeanDefinitionReader 中，在仅仅使用 InputSource 作为源加载 BeanDefinition 时，就可以使用 DescriptiveResource 定义自己的 Description，从而在出错信息中可以方便知道问题源的位置。</p>\n<h3 id=\"统一资源加载：ResourceLoader体系\"><a href=\"#统一资源加载：ResourceLoader体系\" class=\"headerlink\" title=\"统一资源加载：ResourceLoader体系\"></a>统一资源加载：ResourceLoader体系</h3><img src=\"/2019/10/13/Spring系列——IoC之Resource和ResourceLoader/SpringResourceLoader类图.png\">\n<h4 id=\"ResourceLoader接口\"><a href=\"#ResourceLoader接口\" class=\"headerlink\" title=\"ResourceLoader接口\"></a>ResourceLoader接口</h4><p>Spring 将资源的定义和资源的加载区分开，Resource 定义了统一的资源，那资源的加载则由 ResourceLoader 来统一定义。</p>\n<p><code>org.springframework.core.io.ResourceLoader</code> 为 Spring 资源加载的统一抽象，具体的资源加载则由相应的实现类来完成。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ResourceLoader</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tString CLASSPATH_URL_PREFIX = ResourceUtils.CLASSPATH_URL_PREFIX;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t根据路径返回资源</span></span><br><span class=\"line\">\t<span class=\"function\">Resource <span class=\"title\">getResource</span><span class=\"params\">(String location)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t返回ClassLoader</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"function\">ClassLoader <span class=\"title\">getClassLoader</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>getResource(String location)</code> 通过给定的 location 参数获取 Resource 实例，该实例可以是 ClassPathResource 、 FileSystemResource 、 UrlResource 等，但该方法返回的 Resource 实例并不能保证一定存在，必须通过 <code>exists()</code> 方法进行判断。该方法支持以下模式的资源加载：<ul>\n<li>URL 位置资源，如 <code>&quot;file:C:/test.dat&quot;</code> 。</li>\n<li>ClassPath 位置资源，如 <code>&quot;classpath:test.dat</code> 。</li>\n<li>相对路径资源，如 <code>&quot;WEB-INF/test.dat&quot;</code> ，此时返回的 Resource 实例，根据实现不同而不同。</li>\n</ul>\n</li>\n<li><code>getClassLoader()</code> 方法返回 ClassLoader 实例，对于想要获取 ResourceLoader 使用的 ClassLoader 用户来说，可以直接调用该方法来获取。在分析 Resource 时，提到了一个类 ClassPathResource ，这个类是可以根据指定的 ClassLoader 来加载资源的。</li>\n</ul>\n<h4 id=\"DefaultResourceLoader-类\"><a href=\"#DefaultResourceLoader-类\" class=\"headerlink\" title=\"DefaultResourceLoader 类\"></a>DefaultResourceLoader 类</h4><h5 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h5><p>DefaultResourceLoader 类有两个构造方法：</p>\n<ol>\n<li>不带参数的构造方法：使用的 ClassLoader 为默认的 ClassLoader（一般为<code>Thread.currentThread().getContextClassLoader()</code> ）。</li>\n<li>带参数的构造方法：ClassLoader可以通过 <code>ClassUtils.getDefaultClassLoader()</code>获取。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不带参数的构造方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DefaultResourceLoader</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.classLoader = ClassUtils.getDefaultClassLoader();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 带参数的构造方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DefaultResourceLoader</span><span class=\"params\">(@Nullable ClassLoader classLoader)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.classLoader = classLoader;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可自行设置ClassLoader</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setClassLoader</span><span class=\"params\">(@Nullable ClassLoader classLoader)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.classLoader = classLoader;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ClassLoader <span class=\"title\">getClassLoader</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (<span class=\"keyword\">this</span>.classLoader != <span class=\"keyword\">null</span> ? <span class=\"keyword\">this</span>.classLoader : ClassUtils.getDefaultClassLoader());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"getResource-方法\"><a href=\"#getResource-方法\" class=\"headerlink\" title=\"getResource 方法\"></a>getResource 方法</h5><p>getResource 方法根据给定的 location 获得对应的资源，注意此方法返回的资源类型只有：ClassPathContextResource、ClassPathResource、FileUrlResource、 UrlResource。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Resource <span class=\"title\">getResource</span><span class=\"params\">(String location)</span> </span>&#123;Assert.notNull(location, <span class=\"string\">\"Location must not be null\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t首先，通过 ProtocolResolver 加载资源</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (ProtocolResolver protocolResolver : getProtocolResolvers()) &#123;</span><br><span class=\"line\">\t\tResource resource = protocolResolver.resolve(location, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (resource != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> resource;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"comment\">// \t其次，以 / 开头，返回 ClassPathContextResource 类型的资源</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (location.startsWith(<span class=\"string\">\"/\"</span>)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> getResourceByPath(location);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"comment\">// \t再次，以 classpath: 开头，返回 ClassPathResource 类型的资源</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (location.startsWith(CLASSPATH_URL_PREFIX)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ClassPathResource(location.substring(CLASSPATH_URL_PREFIX.length()),getClassLoader());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"comment\">//\t然后，根据是否为文件 URL ，是则返回 FileUrlResource 类型的资源，否则返回 UrlResource 类型的资源</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Try to parse the location as a URL...</span></span><br><span class=\"line\">\t\t\tURL url = <span class=\"keyword\">new</span> URL(location);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> (ResourceUtils.isFileURL(url) ? <span class=\"keyword\">new</span> FileUrlResource(url) : <span class=\"keyword\">new</span> UrlResource(url));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"><span class=\"comment\">//\t最后，返回 ClassPathContextResource 类型的资源</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (MalformedURLException ex) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// No URL -&gt; resolve as resource path.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> getResourceByPath(location);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"ProtocolResolver\"><a href=\"#ProtocolResolver\" class=\"headerlink\" title=\"ProtocolResolver\"></a>ProtocolResolver</h5><p><code>org.springframework.core.io.ProtocolResolver</code> ，用户自定义协议资源解决策略，作为 DefaultResourceLoader 的 <strong>SPI</strong>：它允许用户自定义资源加载协议，而不需要继承 ResourceLoader 的子类。<br>在介绍 Resource 时，提到如果要实现自定义 Resource，我们只需要<strong>继承 AbstractResource</strong> 即可；而对ResourceLoader而言，有了 ProtocolResolver 后，我们不需要直接继承 DefaultResourceLoader，改为<strong>实现 ProtocolResolver 接口即可实现自定义的 ResourceLoader</strong>。</p>\n<p>ProtocolResolver 接口，仅有一个方法 <code>Resource resolve(String location, ResourceLoader resourceLoader)</code> 。代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过实现ProtocolResolver接口，可以实现自定义的 ResourceLoader</span></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ProtocolResolver</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t使用指定的 ResourceLoader ，解析指定的 location</span></span><br><span class=\"line\"><span class=\"comment\">//  若成功，则返回对应的 Resource</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"function\">Resource <span class=\"title\">resolve</span><span class=\"params\">(String location, ResourceLoader resourceLoader)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当自定义实现 ProtocolResolver 接口后，只需调用 <code>DefaultResourceLoader.addProtocolResolver(ProtocolResolver)</code> 方法即可将自定义的 Resolver 加入工作区。代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  ProtocolResolver 集合</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Set&lt;ProtocolResolver&gt; protocolResolvers = <span class=\"keyword\">new</span> LinkedHashSet&lt;&gt;(<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  将自定义实现的ProtocolResolver类加入工作区</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addProtocolResolver</span><span class=\"params\">(ProtocolResolver resolver)</span> </span>&#123;</span><br><span class=\"line\">\tAssert.notNull(resolver, <span class=\"string\">\"ProtocolResolver must not be null\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.protocolResolvers.add(resolver);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"FileSystemResourceLoader\"><a href=\"#FileSystemResourceLoader\" class=\"headerlink\" title=\"FileSystemResourceLoader\"></a>FileSystemResourceLoader</h4><p>FileSystemResourceLoader 继承 DefaultResourceLoader ，且覆写了 <code>getResourceByPath(String)</code> 方法，使之从文件系统加载资源并以 FileSystemResource 类型返回。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Resource <span class=\"title\">getResourceByPath</span><span class=\"params\">(String path)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (path.startsWith(<span class=\"string\">\"/\"</span>)) &#123;</span><br><span class=\"line\"><span class=\"comment\">//\t\t截取字符串</span></span><br><span class=\"line\">\t\tpath = path.substring(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"comment\">//\t创建 FileSystemContextResource 类型的资源</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FileSystemContextResource(path);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"FileSystemContextResource-内部类\"><a href=\"#FileSystemContextResource-内部类\" class=\"headerlink\" title=\"FileSystemContextResource 内部类\"></a>FileSystemContextResource 内部类</h5><p>FileSystemContextResource ，为 FileSystemResourceLoader 的内部类，它继承 FileSystemResource 类，实现 ContextResource 接口。该内部类出现的原因主要是实现 <code>getPathWithinContext()</code> 方法。代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileSystemContextResource</span> <span class=\"keyword\">extends</span> <span class=\"title\">FileSystemResource</span> <span class=\"keyword\">implements</span> <span class=\"title\">ContextResource</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FileSystemContextResource</span><span class=\"params\">(String path)</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//\t\t调用父类 FileSystemResource 构造方法</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(path);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getPathWithinContext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> getPath();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"ClassRelativeResourceLoader\"><a href=\"#ClassRelativeResourceLoader\" class=\"headerlink\" title=\"ClassRelativeResourceLoader\"></a>ClassRelativeResourceLoader</h4><p><code>org.springframework.core.io.ClassRelativeResourceLoader</code>，是 DefaultResourceLoader 的另一个子类的实现。和 FileSystemResourceLoader 类似，在实现代码的结构上类似，也是覆写 <code>getResourceByPath(String path)</code> 方法，并返回其对应的 ClassRelativeContextResource 的资源类型。<br>ClassRelativeResourceLoader 扩展的功能是可以根据给定的class所在包或者所在包的子包下加载资源。</p>\n<h4 id=\"ResourcePatternResolver-接口\"><a href=\"#ResourcePatternResolver-接口\" class=\"headerlink\" title=\"ResourcePatternResolver 接口\"></a>ResourcePatternResolver 接口</h4><p>ResourceLoader 的 <code>Resource getResource(String location)</code> 方法，每次只能根据 location 返回一个 Resource 。当需要加载多个资源时，只能多次调用 <code>getResource(String location)</code> 方法。<code>org.springframework.core.io.support.ResourcePatternResolver</code> 是 ResourceLoader 的扩展，它支持根据指定的资源路径匹配模式<strong>每次返回多个</strong> Resource 实例，其定义如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//支持根据指定的资源路径匹配模式每次返回多个 Resource 实例</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ResourcePatternResolver</span> <span class=\"keyword\">extends</span> <span class=\"title\">ResourceLoader</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//新增了一种新的协议前缀 \"classpath*:\"，该协议前缀由其子类负责实现</span></span><br><span class=\"line\">\tString CLASSPATH_ALL_URL_PREFIX = <span class=\"string\">\"classpath*:\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tResource[] getResources(String locationPattern) <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"PathMatchingResourcePatternResolver-类\"><a href=\"#PathMatchingResourcePatternResolver-类\" class=\"headerlink\" title=\"PathMatchingResourcePatternResolver 类\"></a>PathMatchingResourcePatternResolver 类</h4><p><code>org.springframework.core.io.support.PathMatchingResourcePatternResolver</code> 为 ResourcePatternResolver 最常用的子类，它除了支持 ResourceLoader 和 ResourcePatternResolver 新增的 <code>&quot;classpath*:&quot;</code> 前缀外，还支持Ant风格的路径匹配模式（类似于 <code>&quot;**/*.xml&quot;</code>）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 支持 Ant 类型的路径匹配</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> PathMatcher pathMatcher = <span class=\"keyword\">new</span> AntPathMatcher();</span><br></pre></td></tr></table></figure>\n<h5 id=\"构造方法-1\"><a href=\"#构造方法-1\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h5><p>PathMatchingResourcePatternResolver 类有三个构造方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\">// PathMatchingResourcePatternResolver 在实例化的时候，可以指定一个 ResourceLoader，如果不指定的话，它会在内部构造一个 DefaultResourceLoader </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PathMatchingResourcePatternResolver</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.resourceLoader = <span class=\"keyword\">new</span> DefaultResourceLoader();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PathMatchingResourcePatternResolver</span><span class=\"params\">(ResourceLoader resourceLoader)</span> </span>&#123;</span><br><span class=\"line\">\tAssert.notNull(resourceLoader, <span class=\"string\">\"ResourceLoader must not be null\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.resourceLoader = resourceLoader;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PathMatchingResourcePatternResolver</span><span class=\"params\">(@Nullable ClassLoader classLoader)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.resourceLoader = <span class=\"keyword\">new</span> DefaultResourceLoader(classLoader);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"getResource\"><a href=\"#getResource\" class=\"headerlink\" title=\"getResource\"></a>getResource</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//\t委托给相应的 ResourceLoader 来实现</span></span><br><span class=\"line\"><span class=\"comment\">//\t未指定 ResourceLoader 参数的情况下，那么在加载资源时，其实就是使用 DefaultResourceLoader 的过程</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ResourceLoader <span class=\"title\">getResourceLoader</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.resourceLoader;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Resource <span class=\"title\">getResource</span><span class=\"params\">(String location)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> getResourceLoader().getResource(location);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"getResources\"><a href=\"#getResources\" class=\"headerlink\" title=\"getResources\"></a>getResources</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Resource[] getResources(String locationPattern) <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">\tAssert.notNull(locationPattern, <span class=\"string\">\"Location pattern must not be null\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//\t路径以 classpath* 开头:</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (locationPattern.startsWith(CLASSPATH_ALL_URL_PREFIX)) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// a class path resource (multiple resources for same name possible)</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t路径包含通配符</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (getPathMatcher().isPattern(locationPattern.substring(CLASSPATH_ALL_URL_PREFIX.length()))) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// a class path resource pattern</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> findPathMatchingResources(locationPattern);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"><span class=\"comment\">//\t\t路径不包含通配符</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// all class path resources with the given name</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> findAllClassPathResources(locationPattern.substring(CLASSPATH_ALL_URL_PREFIX.length()));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"comment\">//\t路径不以classpath*:开头</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Generally only look for a pattern after a prefix here,</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// and on Tomcat only after the \"*/\" separator for its \"war:\" protocol.</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> prefixEnd = (locationPattern.startsWith(<span class=\"string\">\"war:\"</span>) ? locationPattern.indexOf(<span class=\"string\">\"*/\"</span>) + <span class=\"number\">1</span> : locationPattern.indexOf(<span class=\"string\">':'</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 路径包含通配符</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (getPathMatcher().isPattern(locationPattern.substring(prefixEnd))) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// a file pattern</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> findPathMatchingResources(locationPattern);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 路径不包含通配符</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// a single resource with the given name</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Resource[] &#123;getResourceLoader().getResource(locationPattern)&#125;;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>非 <code>&quot;classpath*:&quot;</code> 开头，且路径不包含通配符，直接委托给相应的 ResourceLoader 来实现。</li>\n<li>其他情况，调用 <code>findAllClassPathResources()</code>或 <code>findPathMatchingResources()</code> 方法，返回多个 Resource 。</li>\n</ul>\n<h5 id=\"findAllClassPathResources\"><a href=\"#findAllClassPathResources\" class=\"headerlink\" title=\"findAllClassPathResources\"></a>findAllClassPathResources</h5><p>当 locationPattern 以 <code>&quot;classpath*:&quot;</code> 开头但是不包含通配符，则调用 <code>findAllClassPathResources()</code> 方法加载资源。该方法返回 classes 路径下和所有 jar 包中的所有相匹配的资源。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> Resource[] findAllClassPathResources(String location) <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">\tString path = location;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (path.startsWith(<span class=\"string\">\"/\"</span>)) &#123;</span><br><span class=\"line\">\t\tpath = path.substring(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"comment\">//\t调用doFindAllClassPathResources方法，真正执行加载所有 classpath 资源</span></span><br><span class=\"line\">\tSet&lt;Resource&gt; result = doFindAllClassPathResources(path);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\tlogger.trace(<span class=\"string\">\"Resolved classpath location [\"</span> + location + <span class=\"string\">\"] to resources \"</span> + result);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"comment\">//\t返回Resource数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result.toArray(<span class=\"keyword\">new</span> Resource[<span class=\"number\">0</span>]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>真正执行加载的是在 <code>doFindAllClassPathResources()</code> 方法，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Set&lt;Resource&gt; <span class=\"title\">doFindAllClassPathResources</span><span class=\"params\">(String path)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\tSet&lt;Resource&gt; result = <span class=\"keyword\">new</span> LinkedHashSet&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\">\tClassLoader cl = getClassLoader();</span><br><span class=\"line\">\t<span class=\"comment\">// &lt;1&gt; 根据 ClassLoader 加载路径下的所有资源</span></span><br><span class=\"line\">\tEnumeration&lt;URL&gt; resourceUrls = (cl != <span class=\"keyword\">null</span> ? cl.getResources(path) : ClassLoader.getSystemResources(path));</span><br><span class=\"line\">\t<span class=\"comment\">// &lt;2&gt; 遍历 URL 集合，调用 convertClassLoaderURL(URL url) 方法，将 URL 转换成 UrlResource 对象</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (resourceUrls.hasMoreElements()) &#123;</span><br><span class=\"line\">\t\tURL url = resourceUrls.nextElement();</span><br><span class=\"line\">\t\tresult.add(convertClassLoaderURL(url));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// &lt;3&gt; 加载路径下得所有 jar 包</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"string\">\"\"</span>.equals(path)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\taddAllClassLoaderJarRoots(cl, result);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>&lt;1&gt;</code>处，根据 ClassLoader 加载路径下的所有资源。在加载资源过程时，如果在构造 PathMatchingResourcePatternResolver 实例的时候如果传入了 ClassLoader ，则调用该 ClassLoader 的 <code>getResources()</code> 方法，否则调用 <code>ClassLoader.getSystemResources(path)</code> 方法。<code>ClassLoader.getResources()</code> 方法代码如下:<ul>\n<li>如果当前父类加载器不为null，则通过父类向上迭代获取资源，否则调用 <code>getBootstrapResources()</code>。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// java.lang.ClassLoader类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Enumeration&lt;URL&gt; <span class=\"title\">getResources</span><span class=\"params\">(String name)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">    Enumeration&lt;URL&gt;[] tmp = (Enumeration&lt;URL&gt;[]) <span class=\"keyword\">new</span> Enumeration&lt;?&gt;[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (parent != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        tmp[<span class=\"number\">0</span>] = parent.getResources(name);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        tmp[<span class=\"number\">0</span>] = getBootstrapResources(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tmp[<span class=\"number\">1</span>] = findResources(name);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CompoundEnumeration&lt;&gt;(tmp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><code>&lt;2&gt;</code>处，遍历 URL 集合，调用 <code>convertClassLoaderURL(URL url)</code> 方法，将 URL 转换成 UrlResource 对象。</p>\n</li>\n<li><p><code>&lt;3&gt;</code>处，若 path 为空时，则调用 <code>addAllClassLoaderJarRoots</code> 方法，该方法主要是加载路径下所有 jar 包。</p>\n</li>\n</ul>\n<p>由上述分析可知，<code>findAllClassPathResources()</code> 方法，其实就是利用 ClassLoader 来加载指定路径下的资源，不论它是在 class 路径下还是在 jar 包中。如果我们传入的路径为空或者 /，则会调用 <code>addAllClassLoaderJarRoots()</code> 方法，加载所有的 jar 包。</p>\n<h5 id=\"findPathMatchingResources\"><a href=\"#findPathMatchingResources\" class=\"headerlink\" title=\"findPathMatchingResources\"></a>findPathMatchingResources</h5><p>当 locationPattern 中包含了通配符，则调用该方法进行资源加载。代码如下:</p>\n<p>主要以下两个过程：</p>\n<ol>\n<li>确定目录，获取该目录下得所有资源。</li>\n<li>在所获得的所有资源后，进行迭代匹配获取我们想要的资源。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//当 locationPattern 中包含了通配符，则调用该方法进行资源加载</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> Resource[] findPathMatchingResources(String locationPattern) <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\"><span class=\"comment\">//确定根路径、子路径</span></span><br><span class=\"line\">\tString rootDirPath = determineRootDir(locationPattern);</span><br><span class=\"line\">\tString subPattern = locationPattern.substring(rootDirPath.length());</span><br><span class=\"line\"><span class=\"comment\">//\t获取根据路径下的资源</span></span><br><span class=\"line\">\tResource[] rootDirResources = getResources(rootDirPath);</span><br><span class=\"line\"><span class=\"comment\">//\t遍历、迭代</span></span><br><span class=\"line\">\tSet&lt;Resource&gt; result = <span class=\"keyword\">new</span> LinkedHashSet&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (Resource rootDirResource : rootDirResources) &#123;</span><br><span class=\"line\">\t\trootDirResource = resolveRootDirResource(rootDirResource);</span><br><span class=\"line\">\t\tURL rootDirUrl = rootDirResource.getURL();</span><br><span class=\"line\">\t\t<span class=\"comment\">// bundle 资源类型</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (equinoxResolveMethod != <span class=\"keyword\">null</span> &amp;&amp; rootDirUrl.getProtocol().startsWith(<span class=\"string\">\"bundle\"</span>)) &#123;</span><br><span class=\"line\">\t\t\tURL resolvedUrl = (URL) ReflectionUtils.invokeMethod(equinoxResolveMethod, <span class=\"keyword\">null</span>, rootDirUrl);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (resolvedUrl != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\trootDirUrl = resolvedUrl;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\trootDirResource = <span class=\"keyword\">new</span> UrlResource(rootDirUrl);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// vfs 资源类型</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (rootDirUrl.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) &#123;</span><br><span class=\"line\">\t\t\tresult.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirUrl, subPattern, getPathMatcher()));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// jar 资源类型</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ResourceUtils.isJarURL(rootDirUrl) || isJarResource(rootDirResource)) &#123;</span><br><span class=\"line\">\t\t\tresult.addAll(doFindPathMatchingJarResources(rootDirResource, rootDirUrl, subPattern));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 其他资源类型</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tresult.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\tlogger.trace(<span class=\"string\">\"Resolved location pattern [\"</span> + locationPattern + <span class=\"string\">\"] to resources \"</span> + result);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result.toArray(<span class=\"keyword\">new</span> Resource[<span class=\"number\">0</span>]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"determineRootDir\"><a href=\"#determineRootDir\" class=\"headerlink\" title=\"determineRootDir\"></a>determineRootDir</h6><p><code>determineRootDir(String location)</code> 方法，主要是用于确定根路径。代码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//\t确定根路径</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">determineRootDir</span><span class=\"params\">(String location)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 找到冒号的后一位</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> prefixEnd = location.indexOf(<span class=\"string\">':'</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 根目录结束位置</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> rootDirEnd = location.length();</span><br><span class=\"line\">\t<span class=\"comment\">// 在从冒号开始到最后的字符串中，循环判断是否包含通配符，如果包含，则截断最后一个由”/”分割的部分。</span></span><br><span class=\"line\">\t<span class=\"comment\">// 例如：在我们路径中，就是最后的ap?-context.xml这一段。再循环判断剩下的部分，直到剩下的路径中都不包含通配符。</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (rootDirEnd &gt; prefixEnd &amp;&amp; getPathMatcher().isPattern(location.substring(prefixEnd, rootDirEnd))) &#123;</span><br><span class=\"line\">\t\trootDirEnd = location.lastIndexOf(<span class=\"string\">'/'</span>, rootDirEnd - <span class=\"number\">2</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 如果查找完成后，rootDirEnd = 0 了，则将之前赋值的 prefixEnd 的值赋给 rootDirEnd ，也就是冒号的后一位</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (rootDirEnd == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\trootDirEnd = prefixEnd;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 截取根目录</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> location.substring(<span class=\"number\">0</span>, rootDirEnd);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>Spring 提供了 Resource 和 ResourceLoader 来统一抽象整个资源及其加载。使得资源与资源加载有了一个更加清晰的界限，并且提供了合适的 Default 类，使得自定义实现更加方便和清晰。</li>\n<li>AbstractResource 为 Resource 的默认抽象实现，其对 Resource 接口做了一个统一的实现，子类继承该类后只需要覆盖相应的方法即可，同时对于自定义的 Resource 也需继承该类。</li>\n<li>DefaultResourceLoader 同样也是 ResourceLoader 的默认实现，在自定 ResourceLoader 的时候我们除了可以继承该类外，还可以实现 <code>ProtocolResolver</code> 接口来实现自定资源加载协议。</li>\n<li>DefaultResourceLoader 每次只能返回单一的资源，所以 Spring 针对这个提供了另外一个接口 ResourcePatternResolver ，该接口提供了根据指定的 locationPattern 返回多个资源的策略。其子类 PathMatchingResourcePatternResolver 是一个集大成者的 ResourceLoader ，因为它不但实现了 <code>Resource getResource(String location)</code> 方法，也实现了 <code>Resource[] getResources(String locationPattern)</code> 方法。</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ol>\n<li><a href=\"http://svip.iocoder.cn/Spring/IoC-load-Resource/\" target=\"_blank\" rel=\"noopener\">【死磕 Spring】—— IoC 之 Spring 统一资源加载策略</a></li>\n<li><a href=\"http://www.blogjava.net/DLevin/archive/2012/12/01/392325.html\" target=\"_blank\" rel=\"noopener\">深入Spring IOC源码之Resource</a></li>\n<li><a href=\"http://www.blogjava.net/DLevin/archive/2012/12/01/392337.html\" target=\"_blank\" rel=\"noopener\">深入Spring IOC源码之ResourceLoader</a></li>\n<li><a href=\"https://www.cnblogs.com/doit8791/p/5769254.html\" target=\"_blank\" rel=\"noopener\">Spring资源抽象Resource</a></li>\n</ol>\n","categories":[],"tags":[]},{"title":"Spring系列——理解IoC","url":"http://yoursite.com/2019/10/07/Spring系列——理解IoC/","content":"<h3 id=\"Spring-IoC概述\"><a href=\"#Spring-IoC概述\" class=\"headerlink\" title=\"Spring IoC概述\"></a>Spring IoC概述</h3><p>IoC 全称为 <code>Inversion of Control</code> ，翻译为 “控制反转”。</p>\n<p>如何理解“控制反转”好呢？理解好它的关键在于我们需要回答如下四个问题：</p>\n<ol>\n<li>谁控制谁</li>\n<li>控制什么</li>\n<li>为何是反转</li>\n<li>哪些方面反转</li>\n</ol>\n<p>通过一个例子可以更方便理解IoC。假设一个人想喝新鲜橙汁，在没有饮品店的日子里，最直观的做法就是：买果汁机和橙子，自己动手制作。值得注意的是：这个过程是自己“主动”创造的过程，也就是说一杯橙汁需要自己创造。这种方法就对应在程序代码中直接 <code>new</code> 一个橙汁对象，橙汁全程由自己制作管理。</p>\n<p>然而到了今时今日，由于饮品店的盛行，当想喝橙汁时，第一想法就转换成了找到饮品店的联系方式，通过电话等渠道描述需要、地址、联系方式等，下订单等待，过一会儿就会有人送来橙汁了。在该过程中并没有“主动”去创造橙汁，橙汁是由饮品店创造的，而不是你，然而也完全达到了你的要求，甚至比你创造的要好上那么一些。这个过程饮品店相当于Spring容器，我们获取橙汁对象并不是自己在程序代码中 <code>new</code> 一个对象，而是直接在Spring容器（饮品店）直接获取，饮品店管理橙汁的制作过程。</p>\n<p>现在在看上面那四个问题，答案就显得非常明显了:</p>\n<ol>\n<li><strong>谁控制谁</strong>：在传统的开发模式下，我们都是采用直接 <code>new</code> 一个对象的方式来创建对象，也就是说你依赖的对象直接由你自己控制，有了 IoC 容器后，则直接由 IoC 容器来控制。所以“谁控制谁”，当然是 IoC 容器控制对象。</li>\n<li><strong>控制什么</strong>：控制对象。</li>\n<li><strong>为何是反转</strong>：没有 IoC 的时候我们都是在自己代码中主动去创建被依赖的对象，这是正转。但是有了 IoC 后，所依赖的对象直接由 IoC 容器创建后注入到被注入的对象中，依赖的对象由原来的主动获取变成被动接受，所以是反转。</li>\n<li><strong>哪些方面反转</strong>：所依赖对象的获取被反转。</li>\n</ol>\n<h4 id=\"注入方式\"><a href=\"#注入方式\" class=\"headerlink\" title=\"注入方式\"></a>注入方式</h4><p><code>IoC Service Provider</code>为被注入对象提供被依赖对象也有如下几种方式：构造方法注入、setter方法注入、接口注入。</p>\n<h5 id=\"构造方法注入\"><a href=\"#构造方法注入\" class=\"headerlink\" title=\"构造方法注入\"></a>构造方法注入</h5><p>构造器注入，顾名思义就是被注入的对象通过在其构造方法中声明依赖对象的参数列表，让外部知道它需要哪些依赖对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Consumer(OrangeJuice orangeJuice) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.orangeJuice = orangeJuice;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"setter方法注入\"><a href=\"#setter方法注入\" class=\"headerlink\" title=\"setter方法注入\"></a>setter方法注入</h5><p>对于 JavaBean 对象而言，我们一般都是通过 getter 和 setter 方法来访问和设置对象的属性。所以，当前对象只需要为其所依赖的对象提供相对应的 setter 方法，就可以通过该方法将相应的依赖对象设置到被注入对象中。如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> OrangeJuice orangeJuice;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setOrangeJuice</span><span class=\"params\">(OrangeJuice orangeJuice)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.orangeJuice = orangeJuice;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相比于构造器注入，setter 方式注入会显得比较宽松灵活些，它可以在任何时候进行注入（当然是在使用依赖对象之前），</p>\n<h5 id=\"接口注入\"><a href=\"#接口注入\" class=\"headerlink\" title=\"接口注入\"></a>接口注入</h5><p>接口方式注入带有侵入性，因为它需要被依赖的对象实现不必要的接口，一般都不推荐这种方式。</p>\n<h3 id=\"Spring-体系结构\"><a href=\"#Spring-体系结构\" class=\"headerlink\" title=\"Spring 体系结构\"></a>Spring 体系结构</h3><h4 id=\"Resource-体系\"><a href=\"#Resource-体系\" class=\"headerlink\" title=\"Resource 体系\"></a>Resource 体系</h4><p><code>org.springframework.core.io.Resource</code> 是对资源的抽象, 不同实现类代表了对不同资源的访问策略，如 ClassPathResource、RLResource、FileSystemResource 等。</p>\n\n<h4 id=\"ResourceLoader-体系\"><a href=\"#ResourceLoader-体系\" class=\"headerlink\" title=\"ResourceLoader 体系\"></a>ResourceLoader 体系</h4><p>有了资源，就应该有资源加载，Spring 利用<code>org.springframework.core.io.ResourceLoader</code>来进行统一资源加载，类图如下：</p>\n<img src=\"/2019/10/07/Spring系列——理解IoC/SpringResourceLoader类图.png\">\n<h4 id=\"BeanFactory-体系\"><a href=\"#BeanFactory-体系\" class=\"headerlink\" title=\"BeanFactory 体系\"></a>BeanFactory 体系</h4><p><code>org.springframework.beans.factory.BeanFactory</code>，是一个非常纯粹的 bean 容器，它是 IoC 必备的数据结构，其中 BeanDefinition 是它的基本结构。BeanFactory 内部维护着一个BeanDefinition map ，并可根据 BeanDefinition 的描述进行 bean 的创建和管理。</p>\n<ul>\n<li>BeanFactory 有三个直接子类 ListableBeanFactory、HierarchicalBeanFactory 和 AutowireCapableBeanFactory 。</li>\n<li>DefaultListableBeanFactory 为默认实现，它实现了所有接口。</li>\n</ul>\n<img src=\"/2019/10/07/Spring系列——理解IoC/SpringBeanFactory类图.png\">\n<h4 id=\"BeanDefinition-体系\"><a href=\"#BeanDefinition-体系\" class=\"headerlink\" title=\"BeanDefinition 体系\"></a>BeanDefinition 体系</h4><p><code>org.springframework.beans.factory.config.BeanDefinition</code> ，用来描述 Spring 中的 Bean 对象。</p>\n<img src=\"/2019/10/07/Spring系列——理解IoC/SpringBeanDefinition类图.png\">\n<h4 id=\"BeanDefinitionReader-体系\"><a href=\"#BeanDefinitionReader-体系\" class=\"headerlink\" title=\"BeanDefinitionReader 体系\"></a>BeanDefinitionReader 体系</h4><p><code>org.springframework.beans.factory.support.BeanDefinitionReader</code> 的作用是读取 Spring 的配置文件的内容，并将其转换成 Ioc 容器内部的数据结构 ：BeanDefinition 。</p>\n<img src=\"/2019/10/07/Spring系列——理解IoC/SpringBeanDefinitionReader类图.png\">\n<h4 id=\"ApplicationContext-体系\"><a href=\"#ApplicationContext-体系\" class=\"headerlink\" title=\"ApplicationContext 体系\"></a>ApplicationContext 体系</h4><p><code>org.springframework.context.ApplicationContext</code>，它叫做应用上下文，是应用层容器。它继承 BeanFactory ，所以它是 BeanFactory 的扩展升级版。由于 ApplicationContext 的结构就决定了它与 BeanFactory 的不同，其主要区别有：</p>\n<ol>\n<li>继承 <code>org.springframework.context.MessageSource</code> 接口，提供国际化的标准访问策略。</li>\n<li>继承 <code>org.springframework.context.ApplicationEventPublisher</code> 接口，提供强大的事件机制。</li>\n<li>扩展 ResourceLoader ，可以用来加载多种 Resource ，可以灵活访问不同的资源。</li>\n<li>对 Web 应用的支持。</li>\n</ol>\n<img src=\"/2019/10/07/Spring系列——理解IoC/SpringApplicationContext类图.png\">\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>本文主要介绍 IoC 的概念，以及 IoC 的三种注入方式，然后介绍了Spring的六大体系，包括Resource、ResourceLoader、BeanFactory、BeanDefinition、BeanDefinitionReader以及ApplicationContext，后续将详细介绍这些体系的相关源码。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ol>\n<li><a href=\"http://svip.iocoder.cn/Spring/IoC-intro/\" target=\"_blank\" rel=\"noopener\">【死磕 Spring】—— IoC 之深入理解 Spring IoC</a></li>\n</ol>\n","categories":[],"tags":[]},{"title":"浅谈SPI机制","url":"http://yoursite.com/2019/09/04/浅谈SPI机制/","content":"<h3 id=\"SPI的概念\"><a href=\"#SPI的概念\" class=\"headerlink\" title=\"SPI的概念\"></a>SPI的概念</h3><p>面向的对象的设计里，我们一般推荐模块之间基于接口编程，模块之间不对实现类进行硬编码。一旦代码里涉及具体的实现类，就违反了可拔插的原则，如果需要替换一种实现，就需要修改代码。为了实现在模块装配的时候不用在程序里动态指明，这就需要一种服务发现机制。SPI 就是提供这样的一个机制：为某个接口寻找服务实现的机制。</p>\n<img src=\"/2019/09/04/浅谈SPI机制/SPI机制.png\">\n<p>SPI 全称为 <code>Service Provider Interface</code> ，是 Java 提供的一套用来被第三方实现或者扩展的API，可以用来启用框架扩展和替换组件。SPI 是一种服务发现机制，本质是将接口实现类的全限定名配置在文件中，并由服务加载器读取配置文件，加载实现类，使得运行时可以动态为接口替换实现类。正因此特性，我们可以很容易的通过 SPI 机制为我们的程序提供拓展功能。</p>\n<h4 id=\"SPI对比API\"><a href=\"#SPI对比API\" class=\"headerlink\" title=\"SPI对比API\"></a>SPI对比API</h4><img src=\"/2019/09/04/浅谈SPI机制/API对比SPI.png\">\n<p><strong>API</strong>:</p>\n<ol>\n<li>概念上更接近实现方</li>\n<li>组织上位于实现方所在的包中</li>\n<li>实现和接口在一个包中</li>\n</ol>\n<p><strong>SPI</strong>:</p>\n<ol>\n<li>概念上更依赖调用方</li>\n<li>组织上位于调用方所在的包中</li>\n<li>实现位于独立的包中（也可认为在提供方中）</li>\n</ol>\n<h3 id=\"Java-SPI\"><a href=\"#Java-SPI\" class=\"headerlink\" title=\"Java SPI\"></a>Java SPI</h3><p>在 JDK6 里面引进的一个新的特性 <code>ServiceLoader</code>，它主要是用来装载一系列的 service provider 。而且 <code>ServiceLoader</code> 可以通过 service provider 的配置文件来装载指定的 service provider 。当服务的提供者，提供了服务接口的一种实现之后，只需要在jar包的 <code>META-INF/services/</code> 目录里同时创建一个以服务接口命名的文件。该文件里就是实现该服务接口的具体实现类。而当外部程序装配这个模块的时候，就能通过该jar包 <code>META-INF/services/</code> 里的配置文件找到具体的实现类名，并装载实例化，完成模块的注入。</p>\n<h4 id=\"Java-SPI-示例\"><a href=\"#Java-SPI-示例\" class=\"headerlink\" title=\"Java SPI 示例\"></a>Java SPI 示例</h4><p>前面简单介绍了 SPI 机制的原理，本节通过一个示例演示 Java SPI 的使用方法。首先，定义一个接口，名称为 Fruit。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Fruit</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">color</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来定义两个实现类，分别为 Apple 和 Banana。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Apple</span> <span class=\"keyword\">implements</span> <span class=\"title\">Fruit</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">color</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Red\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Banana</span> <span class=\"keyword\">implements</span> <span class=\"title\">Fruit</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">color</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Yellow\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来 <code>META-INF/services</code> 文件夹下创建一个文件，名称为 Fruit 的全限定名 <code>org.apache.spi.Fruit</code> 。文件内容为实现类的全限定的类名，如下：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org<span class=\"selector-class\">.apache</span><span class=\"selector-class\">.spi</span><span class=\"selector-class\">.Apple</span></span><br><span class=\"line\">org<span class=\"selector-class\">.apache</span><span class=\"selector-class\">.spi</span><span class=\"selector-class\">.Banana</span></span><br></pre></td></tr></table></figure>\n<p>做好所需的准备工作，接下来编写代码进行测试。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaSPITest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">color</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        ServiceLoader&lt;Fruit&gt; serviceLoader = ServiceLoader.load(Fruit.class);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Java SPI\"</span>);</span><br><span class=\"line\">        serviceLoader.forEach(Fruit::color);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后来看一下测试结果，从测试结果可以看出，我们的两个实现类被成功的加载，并输出了相应的内容。</p>\n<figure class=\"highlight mathematica\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Java SPI</span><br><span class=\"line\"><span class=\"keyword\">Red</span></span><br><span class=\"line\"><span class=\"keyword\">Yellow</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"DriverManager-SPI\"><a href=\"#DriverManager-SPI\" class=\"headerlink\" title=\"DriverManager SPI\"></a>DriverManager SPI</h3><p><code>DriverManager</code> 是 JDBC 管理和注册不同数据库驱动的工具类。针对一个数据库可能会存在着不同的数据库驱动实现，在使用特定的驱动实现时不希望修改现有的代码才能达到目的，而希望通过一个简单的配置就可以达到效果。比如，我们现在有一个数据库的驱动 A，我们希望在程序里使用它而不修改代码。一种理想的选择就是我们将驱动A的信息加入到一个配置文件中，程序通过读取配置文件信息将 A 加载进来。而以后如果我们希望改用另外一个驱动 B 的时候，我们只需要将配置文件里的信息修改成驱动 B 即可。</p>\n<p>我们在运用 <code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;)</code> 加载 mysql 驱动后，就会执行其中的静态代码把driver注册到 <code>DriverManager</code> 中，以便后续的使用。代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.mysql.jdbc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Driver</span> <span class=\"keyword\">extends</span> <span class=\"title\">NonRegisteringDriver</span> <span class=\"keyword\">implements</span> <span class=\"title\">java</span>.<span class=\"title\">sql</span>.<span class=\"title\">Driver</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Driver</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            DriverManager.registerDriver(<span class=\"keyword\">new</span> Driver());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException var1) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Can't register driver!\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里可以看到，不同的驱动实现了相同的接口 <code>java.sql.Driver</code> ，然后通过 <code>registerDriver</code> 把当前 driver 加载到 <code>DriverManager</code> 中<br>这就体现了使用方提供规则，提供方根据规则把自己加载到使用方中的SPI思想。查看 <code>DriverManager</code> 的源码，可以看到其内部的静态代码块中有一个 <code>loadInitialDrivers</code> 方法，在注释中我们看到用到了上文提到的 SPI 工具类 <code>ServiceLoader</code> 。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* Load the initial JDBC drivers by checking the System property</span></span><br><span class=\"line\"><span class=\"comment\">* jdbc.properties and then use the &#123;<span class=\"doctag\">@code</span> ServiceLoader&#125; mechanism</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\tloadInitialDrivers();</span><br><span class=\"line\">\tprintln(<span class=\"string\">\"JDBC DriverManager initialized\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>点进方法，看到方法里有如下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ServiceLoader&lt;Driver&gt; loadedDrivers = ServiceLoader.load(Driver.class);</span><br><span class=\"line\">Iterator&lt;Driver&gt; drivers = loadedDrivers.iterator();</span><br><span class=\"line\">println(<span class=\"string\">\"DriverManager.initialize: jdbc.drivers = \"</span> + loadedDrivers);</span><br></pre></td></tr></table></figure>\n<p>可见，<code>DriverManager</code> 初始化时也运用了 SPI 机制，使用 <code>ServiceLoader</code> 把写到配置文件里的 Driver 都加载了进来。打开 mysql-connector-java 的 jar 包，果然在 <code>META-INF/services</code> 下发现了上文中提到的接口路径，打开里面的内容，可以看到是 <code>com.mysql.jdbc.Driver</code> 。</p>\n<h3 id=\"Dubbo-SPI\"><a href=\"#Dubbo-SPI\" class=\"headerlink\" title=\"Dubbo SPI\"></a>Dubbo SPI</h3><p>SPI 机制在第三方框架中也有所应用，比如 Dubbo 就是通过 SPI 机制加载所有的组件。Dubbo 并未使用 Java SPI，而是重新实现了一套功能更强的 SPI 机制。Dubbo SPI 的相关逻辑被封装在了 <code>ExtensionLoader</code> 类中，通过 <code>ExtensionLoader</code> ，可以加载指定的实现类。Dubbo SPI 所需的配置文件需放置在 <code>META-INF/dubbo</code>路径下，配置内容如下。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apple = org<span class=\"selector-class\">.apache</span><span class=\"selector-class\">.spi</span><span class=\"selector-class\">.Apple</span></span><br><span class=\"line\">banana = org<span class=\"selector-class\">.apache</span><span class=\"selector-class\">.spi</span><span class=\"selector-class\">.Banana</span></span><br></pre></td></tr></table></figure>\n<p>与 Java SPI 实现类配置不同，Dubbo SPI 是通过键值对的方式进行配置，这样我们可以按需加载指定的实现类。另外，在测试 Dubbo SPI 时，需要在 Fruit 接口上标注<code>@SPI</code>注解。下面来演示 Dubbo SPI 的用法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DubboSPITest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">color</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        ExtensionLoader&lt;Fruit&gt; extensionLoader = </span><br><span class=\"line\">            ExtensionLoader.getExtensionLoader(Fruit.class);</span><br><span class=\"line\">        Fruit apple = extensionLoader.getExtension(<span class=\"string\">\"apple\"</span>);</span><br><span class=\"line\">        apple.color();</span><br><span class=\"line\">        Fruit banana = extensionLoader.getExtension(<span class=\"string\">\"banana\"</span>);</span><br><span class=\"line\">        banana.color();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试结果是：</p>\n<figure class=\"highlight mathematica\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dubbo SPI</span><br><span class=\"line\"><span class=\"keyword\">Red</span></span><br><span class=\"line\"><span class=\"keyword\">Yellow</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>本篇文章简单分别介绍了SPI机制的概念，以及Java SPI ，DriverManager SPI 与 Dubbo SPI 用法。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/28909673\" target=\"_blank\" rel=\"noopener\">Java SPI思想梳理</a></li>\n<li><a href=\"http://dubbo.apache.org/zh-cn/docs/source_code_guide/dubbo-spi.html\" target=\"_blank\" rel=\"noopener\">Dubbo SPI</a></li>\n<li><a href=\"https://www.cnblogs.com/happyframework/archive/2013/09/17/3325560.html\" target=\"_blank\" rel=\"noopener\">设计原则：小议 SPI 和 API</a></li>\n</ol>\n","categories":[],"tags":[]},{"title":"","url":"http://yoursite.com/about/index.html","content":"<blockquote class=\"blockquote-center\"><p>种一棵树最好的时间是十年前，<br>而后是现在。 </p>\n</blockquote>\n<!--   - key: **Github**\n    value: [zer0ing](https://github.com/zer0ing) -->\n<ul>\n<li><p>key: <strong>Zhihu</strong><br>value: <a href=\"https://www.zhihu.com/people/wu-yang-67-1\" target=\"_blank\" rel=\"noopener\">知乎</a></p>\n</li>\n<li><p>key: <strong>Email</strong><br>value: <a href=\"mailto:zeroing.young@gmail.com\" target=\"_blank\" rel=\"noopener\">zeroing.young@gmail.com</a></p>\n</li>\n</ul>\n","categories":[],"tags":[]},{"title":"categories","url":"http://yoursite.com/categories/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"http://yoursite.com/category/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"http://yoursite.com/link/index.html","content":"<p>link:</p>\n<ul>\n<li>name: 织网<br>info: 身体和灵魂，总有一个在路上<br>url: <a href=\"http://zheng-ji.info/\" target=\"_blank\" rel=\"noopener\">http://zheng-ji.info/</a><br>avatar: <a href=\"https://avatars3.githubusercontent.com/u/1414745?v=3&amp;s=460\" target=\"_blank\" rel=\"noopener\">https://avatars3.githubusercontent.com/u/1414745?v=3&amp;s=460</a></li>\n<li>name: Dongyado<br>info: 生命不止，折腾不息<br>url: <a href=\"http://dongyado.com/\" target=\"_blank\" rel=\"noopener\">http://dongyado.com/</a><br>avatar: <a href=\"https://avatars0.githubusercontent.com/u/6274940?v=3&amp;s=460\" target=\"_blank\" rel=\"noopener\">https://avatars0.githubusercontent.com/u/6274940?v=3&amp;s=460</a></li>\n</ul>\n","categories":[],"tags":[]},{"title":"sitemap","url":"http://yoursite.com/sitemap/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://yoursite.com/search/index.html","content":"","categories":[],"tags":[]},{"title":"schedule","url":"http://yoursite.com/schedule/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://yoursite.com/tag/index.html","content":"","categories":[],"tags":[]},{"title":"tags","url":"http://yoursite.com/tags/index.html","content":"","categories":[],"tags":[]}]